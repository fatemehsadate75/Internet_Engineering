<?php
 $submited = ''; if(isset($_GET['ranginesmsprestaaddon'])){ $addon = $_GET['ranginesmsprestaaddon']; $hook = Hook::exec('actionRangineSmsPrestaModuleAddons', array(), null, true); if (is_array($hook) && isset($hook[$addon])) { if(class_exists($addon)){ $addonClass = new $addon; $errors = $addonClass->submit(); } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } Tools::redirect($this->moduleSubpageUrl($addon)); } if (Tools::isSubmit('gatewaysettings')) { $variables = array('USERNAME','PASSWORD','ADMINPHONE','SMSNUMBER','SMSSENUMBER','SMSENABLE', 'UNINSTALLDB','DEBUG','GATEWAYNAME','TOPMENU','LOWCREDITALERT','PANELADDRESS'); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if($key == 'PASSWORD' && $value == '') continue; if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } $submited = 'gatewaysettings'; if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'gatewaysettings'; Tools::redirect($this->moduleSubpageUrl($submited)); }elseif (Tools::isSubmit('RESETPANELAUTH')) { $param = array('op'=>'credit'); $connectpanel = $this -> connectWebservice($param); if ($connectpanel['status'] === 0) { $authCache = array( 'ok' => 'user', 'credit' => round($connectpanel['result']), 'expireTime' => $this -> panelExpireTime(), 'lines' => $this -> panelLines(), 'updateTime' => time(), ); Configuration::updateValue($this->prefix . 'PANELAUTH' , serialize($authCache)); } else { Configuration::updateValue($this->prefix . 'PANELAUTH' , ''); } $submited = 'gatewaysettings'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('preparedsms')) { if (!$this->addPreparedSMSText(Tools::getValue('preparedSmsText'))) { $errors[] = Tools::displayError($this->l('The message is not saved!')); } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'preparedsms'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('oossettings')) { $variables = array( 'OUTOFSTOCK', 'OUTOFSTOCKTHRESHOLD', 'BACKTOSTOCK', 'OOSAUTO', 'OOSSUMADMIN', 'OOSSERNDER', 'OOSBUTTONTEXT', 'OOSBUTTONPOSITION', 'OOSBUTTONWRAPPER', 'SHORTPRODUCTKEY', 'OOSIGNOREATTRCAT', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if($key == 'OOSIGNOREATTRCAT') $value = implode(',',$value); if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'oosSubscribers'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('remotesmssettings')) { $variables = array( 'REMOTEENABLE', 'REMOTEKEY', 'RS_ENABLESHOP', 'RS_DISABLESHOP', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'remotesms'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('verifymobilesettings')) { $variables = array( 'VEFRIFYMOBILEENABLE', 'VEFRIFYMOBILEMANDATORY', 'RESENDOTPDELAY', 'USEVERIFIEDMOBILE', 'OTPLENGTH', 'VERIFICATONTEXT', 'VERIFICATONTEXTTYPE', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'verifymobile'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('AddMobileInput')) { if(!Tools::getValue('MobileInputName') || !Tools::getValue('MobileInputSelector')){ $errors[] = Tools::displayError($this->l('Complete all fields!')); }else{ if (!$this->addVerifyMobileInput(Tools::getValue('MobileInputName'),Tools::getValue('MobileInputSelector'))) { $errors[] = Tools::displayError($this->l('The input is not saved!')); } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Mobile Input Added.'); } $submited = 'verifymobile'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('alertssettings')) { $variables = array( 'NEWORDERA', 'NEWORDERC', 'UPDATEORDERC', 'NEWCUSTOMERA', 'NEWCUSTOMERC', 'NEWORDERFC' , 'NEWORDERFA', 'NEWADDMOBILE', 'ORDERTRACKING', 'ORDERMOBILE', 'GUESTINVOICE', 'ADMININVOICE', 'SHORTINVOICEKEY', 'SHOPNAME', 'CRONJOB', 'CRONITEMS', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } Configuration::updateValue($this->prefix . 'INVOICE_NEWORDER', Tools::getIsset('INVOICE_NEWORDER') ? 1 : 0); Configuration::updateValue($this->prefix . 'INVOICE_UPDATEORDER', Tools::getIsset('INVOICE_UPDATEORDER') ? 1 : 0); Configuration::updateValue($this->prefix . 'INVOICE_UPDATETRACKING', Tools::getIsset('INVOICE_UPDATETRACKING') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_newacount', Tools::getIsset('CRON_newacount') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_neworder', Tools::getIsset('CRON_neworder') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_updateorder', Tools::getIsset('CRON_updateorder') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_updateOrderTracking', Tools::getIsset('CRON_updateOrderTracking') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_newaddress', Tools::getIsset('CRON_newaddress') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_outofstock', Tools::getIsset('CRON_outofstock') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_backtostock', Tools::getIsset('CRON_backtostock') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_manualoos', Tools::getIsset('CRON_manualoos') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_manual', Tools::getIsset('CRON_manual') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_allcustomers', Tools::getIsset('CRON_allcustomers') ? 1 : 0); Configuration::updateValue($this->prefix . 'CRON_smsrule', Tools::getIsset('CRON_smsrule') ? 1 : 0); if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'alertssettings'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('customersmstexts')) { $variables = array( 'NEWACCUTETYPE', 'NEWACCUTEXT', 'NEWORCUTETYPE', 'NEWORCUTEXT', 'UPORCUTETYPE', 'UPORCUTEXT', 'UPORTRTETYPE', 'UPORTRTEXT', 'NEWADDRTETYPE', 'NEWADDRTEXT', 'BACKTOSTOCKTETYPE', 'BACKTOSTOCKTEXT', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'customersmstexts'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('adminsmstexts')) { $variables = array( 'NEWACADTETYPE', 'NEWACADTEXT', 'NEWORADTETYPE', 'NEWORADTEXT', 'OUTOFSTOCKTETYPE', 'OUTOFSTOCKTEXT', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'adminsmstexts'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('sendsms')) { $text = Tools::getValue('SENDONETEXT'); $phones = Tools::getValue('RECIVER'); $sender = Tools::getValue('SMSNUMBER'); if (Tools::isEmpty($text)) { $errors[]=Tools::displayError($this->l('Text is empty')); }elseif (Tools::isEmpty($sender)) { $errors[]=Tools::displayError($this->l('Sender is empty')); }elseif (Tools::strlen($phones)<10) { $errors[] = Tools::displayError($this->l('insert valid phone number')); } else { $result=$this->sendOne($text, $phones, '-', '-', $this->l('Send SMS Manual')); if ($result !='sent') { $errors[]=Tools::displayError($result); } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The sms sent.'); } $submited = 'sendsms'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('sendtoall')) { $text = Tools::getValue('SENDALLTEXT'); $sender = Tools::getValue('SENTOALLSENDERLINE'); $delay = Tools::getValue('SENTOALLDELAYTIME'); $peronce = Tools::getValue('SENTOALLPERONCE'); $between = Tools::getValue('SENTOALLBETWEENTIME'); if (Tools::isEmpty($text)) { $errors[]=Tools::displayError($this->l('Text is empty')); }elseif (Tools::isEmpty($sender)) { $errors[]=Tools::displayError($this->l('Sender is empty')); }else{ $phones=$this->getPhoneMobiles(); if($peronce){ $phonesArrayofArray = array_chunk(explode(';',$phones),$peronce); foreach($phonesArrayofArray as $phonesArray){ $phones = implode(';',$phonesArray); $result=$this->sendOne($text, $phones, $this->l('multiple'), '-', $this->l('Send Customers')); $_POST['SENTOALLDELAYTIME'] += $between; if ($result !='sent') { $errors[]=Tools::displayError($result); } } }else{ $result=$this->sendOne($text, $phones, $this->l('multiple'), '-', $this->l('Send Customers')); if ($result !='sent') { $errors[]=Tools::displayError($result); } } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The sms sent to customers.'); } $submited = 'sendtoall'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('setLisense')) { $license = trim(Tools::getValue('license')); if (Tools::isEmpty($license)) { $errors[]=Tools::displayError($this->l('License is empty')); }else{ $time = time(); $url = $this->support.'/smsapi/prestashop/'.$this->name.'/index2.php?checkLicense'; $param = array( 'Mversion' => $this->version, 'PSversion' => $this->PSversion, 'shop' => $this->shop, 'domain' => $this->domain, 'license' => $license, ); $handler = curl_init($url); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST"); curl_setopt($handler, CURLOPT_POSTFIELDS, $param); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($handler); $unserializedresponse = unserialize($response); if($unserializedresponse !== false){ $newLicense = $unserializedresponse; $newLicense['lastCheckTime'] = $time; if (!Configuration::updateValue($this->prefix . 'LICENSE', base64_encode(serialize($newLicense)))) { $errors[] = Tools::displayError($this->l('Error in saving license. Please Try again.')); } }else{ $errors[] = $response; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The lisence saved successfully'); } $submited = 'welcome'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('onlineregister')) { $posted_data = Tools::getValue('frm'); $time = time(); $url = $this->support.'/smsapi/prestashop/'.$this->name.'/index2.php/?newUser'; $handler = curl_init($url); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST"); curl_setopt($handler, CURLOPT_POSTFIELDS, $posted_data); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($handler); if($response == 'true'){ }else{ $errors[] = Tools::displayError($response); } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The module updated successfully.'); } $submited = 'welcome'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('updateModule')) { if ($content = Tools::file_get_contents($this->support.'/smsapi/prestashop/'.$this->name.'/'.$this->name.'.zip', false)) { $file = _PS_MODULE_DIR_.$this->name.'.zip'; if (file_put_contents($file, $content)) { $tmp_folder = _PS_MODULE_DIR_.md5(time()); if (Tools::ZipExtract($file, $tmp_folder)) { if (Tools::ZipExtract($file, _PS_MODULE_DIR_)) { @unlink($file); }else{ $errors[] = Tools::displayError($this->l('There was an error while extracting the module (file may be corrupted.')); } } Tools::deleteDirectory($tmp_folder, true); }else{ $errors[] = Tools::displayError($this->l('There was an error while save module on disk.')); } }else{ $errors[] = Tools::displayError($this->l('There was an error while download the new module.')); } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The module updated successfully.'); } $token = Tools::getAdminTokenLite('AdminModules'); $request_scheme = Tools::getShopProtocol(); $hostlink = $request_scheme . $_SERVER['SERVER_NAME'] . $_SERVER['PHP_SELF']; $ctrlconfi = "?controller=AdminModules"; $modulePage = $hostlink . $ctrlconfi ."&token=" . $token; Tools::redirect($modulePage); } elseif (Tools::isSubmit('smsrules')) { if(Tools::getValue('ruleBase') == "0"){ $errors[] = Tools::displayError($this->l('The rule has not saved!')); } elseif(Tools::getValue('editruleid') != ""){ if (!$this->editSMSRule(Tools::getAllValues())) { $errors[] = Tools::displayError($this->l('111')); } } elseif (!$this->addSMSRule(Tools::getAllValues())) { $errors[] = Tools::displayError($this->l('The rule has not saved!')); } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The rule has saved.'); } $submited = 'smsrules'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('timedsms')) { if (!$this->addTimedSms(Tools::getAllValues())) { $errors[] = Tools::displayError($this->l('The Timed SMS has not saved!')); } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('The Timed SMS has saved.'); } $submited = 'timedsms'; Tools::redirect($this->moduleSubpageUrl($submited)); } elseif (Tools::isSubmit('sentsms')) { $variables = array( 'ShowSentSMScustomer', 'ShowSentSMSorder', 'ShowSentSMSposition', 'ShowSentSMStime', 'ShowSentSMSstatus', 'ShowSentSMSbulk', 'ShowSentSMSshop', 'ShowSentSMSduration', ); foreach ($_POST as $key => $value) { if (!in_array($key, $variables)) { continue; } if (!Configuration::updateValue($this->prefix . $key, trim($value))) { $errors[] = Tools::displayError($this->l('Settings is not updated!')); break; } } if (isset($errors) && count($errors)) { $this->context->cookie->redirect_errors = implode('<br />', $errors); } else { $this->context->cookie->redirect_success_message = $this->l('Settings updated.'); } $submited = 'sentsms'; Tools::redirect($this->moduleSubpageUrl($submited)); }