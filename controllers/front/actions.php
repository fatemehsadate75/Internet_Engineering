<?php
 class ranginesmsprestaactionsModuleFrontController extends ModuleFrontController { public $phoneNumber; public $id_product; public $id_product_attribute; private $otp; private $oos; public $prefix = 'RANGINE_SMS_'; public function init() { parent::init(); $this->phoneNumber = Tools::getValue('phonenumber'); $this->otp = Tools::getValue('otp'); $this->oos = Tools::getValue('oos'); $action = Tools::getValue('process'); if($action == 'add' || $action == 'remove'){ $this->id_product = (int)Tools::getValue('id_product'); $this->id_product_attribute = (int)Tools::getValue('id_product_attribute'); } } public function postProcess() { switch(Tools::getValue('process')){ case 'remove': $this->processRemove(); break; case 'add': $this->processAdd(); break; case 'mobileverification': if(!Validate::isPhoneNumber($this->phoneNumber)) die(json_encode(array('result'=>'ساختار شماره موبایل درست نیست.'))); if($this->otp != ''){ $verifyotpres = $this->verifyOTP($this->phoneNumber,$this->otp); if($verifyotpres == true){ $cookie = new Cookie('oos_mobile_report'); $cookie->setExpire(time() + 30 * 60); $cookie->variable_name = $this->phoneNumber; $cookie->write(); } die(json_encode(array('result'=>$verifyotpres))); } $sendotpres = $this->sendOTP($this->phoneNumber); die(json_encode(array('result'=>$sendotpres))); break; default: die('action not sent!'); } } public function processRemove() { $product = new Product($this->id_product); if (!Validate::isLoadedObject($product)) die('3'); $context = Context::getContext(); $phoneNumber = (string)Tools::getValue('phoneNumber'); $id_product = (int)Tools::getValue('id_product'); $id_product_attribute = (int)Tools::getValue('id_product_attribute'); $id_shop = (int)$context->shop->id; $id_lang = (int)$context->language->id; $product = new Product($id_product, false, $id_lang, $id_shop, $context); $phone_exist = $this->notificationExist($phoneNumber, $id_product, $id_product_attribute, $id_shop); if (!$phone_exist) die('2'); $delete_sms_alert = $this->deleteNotification($phoneNumber, $id_product, $id_product_attribute, $id_shop); if ($delete_sms_alert !== false) die('1'); die('0'); } public function processAdd() { $context = Context::getContext(); $phoneNumber = (string)Tools::getValue('phoneNumber'); $id_product = (int)Tools::getValue('id_product'); $id_product_attribute = (int)Tools::getValue('id_product_attribute'); $id_shop = (int)$context->shop->id; $id_lang = (int)$context->language->id; $product = new Product($id_product, false, $id_lang, $id_shop, $context); $phone_exist = $this->notificationExist($phoneNumber, $id_product, $id_product_attribute, $id_shop); if ($phone_exist) die('2'); elseif (!Validate::isLoadedObject($product)) die('3'); $add_sms_alert = $this->addNotification($phoneNumber, $id_product, $id_product_attribute, $id_shop); if ($add_sms_alert !== false) die('1'); die('0'); } private function notificationExist($phoneNumber, $id_product, $id_product_attribute, $id_shop){ $customer_id = 0; $sql = new DbQuery(); $sql->select('*'); $sql->from('ranginesmspresta_oos', 't'); $sql->where("t.id_customer = 0"); $sql->where("t.phone_number = '{$phoneNumber}'"); $sql->where("t.id_product = '{$id_product}'"); $sql->where("t.id_product_attribute = '{$id_product_attribute}'"); $sql->where("t.id_shop = '{$id_shop}'"); return count(Db::getInstance()->executeS($sql)); } private function addNotification($phoneNumber, $id_product, $id_product_attribute, $id_shop){ $time = time(); $id_customer = 0; $id_lang = Context::getContext()->language->id; $fields = array( 'id_customer' => pSQL($id_customer), 'phone_number' => pSQL($phoneNumber), 'id_product' => pSQL($id_product), 'id_product_attribute' => pSQL($id_product_attribute), 'id_shop' => pSQL($id_shop), 'id_lang' => pSQL($id_lang), 'timestamp' => pSQL($time), ); return Db::getInstance()->insert('ranginesmspresta_oos', $fields); } private function deleteNotification($phoneNumber, $id_product, $id_product_attribute, $id_shop){ $id_customer = 0; return Db::getInstance()->delete('ranginesmspresta_oos', "phone_number = {$phoneNumber} AND id_product = {$id_product} AND id_product_attribute = {$id_product_attribute} AND id_shop = {$id_shop}"); } private function sendOTP($mobile){ $time = time(); $id_shop = $this->context->shop->id; $id_shop_group = $this->context->shop->id_shop_group; if(Configuration::get($this->prefix . 'RESENDOTPDELAY' , null , null , $id_shop)) $delaytime = Configuration::get($this->prefix . 'RESENDOTPDELAY' , null , null , $id_shop); else $delaytime = 120; $checkMobileExistsSql = "SELECT * FROM "._DB_PREFIX_. "ranginesmspresta_mobiles WHERE id_shop=".$id_shop." AND mobile='".$mobile."' ORDER BY timestamp DESC"; if ($existRow = Db::getInstance()->getRow($checkMobileExistsSql)) { if($existRow['id_customer'] > 0){ if(Customer::customerIdExistsStatic($existRow['id_customer'])) return 'کاربری با همین شماره در سایت وجود دارد'; }elseif($time < $existRow['timestamp'] + $delaytime){ $waittime = $delaytime - ($time - $existRow['timestamp']); return 'لطفاً '.$waittime.'ثانیه برای درخواست کد تأیید جدید صبر نمایید.'; }else{ $sql = "DELETE FROM "._DB_PREFIX_."ranginesmspresta_mobiles WHERE id_shop=".$id_shop." AND mobile='".$mobile."';"; Db::getInstance()->execute($sql); } } $otp = ""; $otpSize = Configuration::get($this->prefix . 'OTPLENGTH' , null , null , $id_shop); for ($i = 0; $i < $otpSize; $i++) { $otp .= rand(0, 9); } if(!class_exists('RangineSmsPresta')) die('The module class not found!'); $ranginesmspresta = new RangineSmsPresta; $shopname = $ranginesmspresta->shop; $type = Configuration::get($this->prefix .'VERIFICATONTEXTTYPE' , null , null , $ranginesmspresta->shop_id); $serviceLineStatus = true; $sendServiceNumber = str_replace('+98', '', Configuration::get($this->prefix .'SMSSENUMBER' , null , null , $ranginesmspresta->shop_id)); if ($sendServiceNumber == '') { $serviceLineStatus = false; } if ($type == 'custom') { $massage = Configuration::get($this->prefix .'VERIFICATONTEXT' , null , null , $ranginesmspresta->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:7yev7tayz3;company:".$shopname.";code:".$otp; } else { $massage = $ranginesmspresta->l('Your verification code: {code}~{shop_name}'); } $vars = array( '{code}' => $otp, '{shop_name}' => $ranginesmspresta->shop, ); $massage = str_replace(array_keys($vars), array_values($vars), $massage); $result = $ranginesmspresta->sendOne($massage, $mobile, '-', '-', $ranginesmspresta->l('Send OTP')); $id_customer = 0; if($result == 'sent'){ $sql = 'INSERT INTO '._DB_PREFIX_.'ranginesmspresta_mobiles (id_customer, id_shop, id_shop_group, mobile, otp, active,timestamp)
				VALUES
				('.$id_customer.',
				'.$this->context->shop->id.',
				'.$this->context->shop->id_shop_group.',
				\''.pSQL($mobile).'\',
				\''.$otp.'\',
				'.'0'.',
				'.$time.'
				)'; if(Db::getInstance()->execute($sql)){ return 'true'; } } return $result; } private function verifyOTP($mobile,$otp){ $time = time(); $id_shop = $this->context->shop->id; $id_shop_group = $this->context->shop->id_shop_group; $checkOtpExistsSql = "SELECT * FROM "._DB_PREFIX_. "ranginesmspresta_mobiles WHERE id_shop=".$id_shop." AND mobile='".$mobile."' AND otp='".$otp."' ORDER BY timestamp DESC"; if ($existRow = Db::getInstance()->getRow($checkOtpExistsSql)) { if($existRow['active'] == 1){ return 'کاربری با همین شماره در سایت وجود دارد'; }elseif($time > $existRow['timestamp'] + 600){ return 'کد تأیید منقضی شده است.'; }else{ $sql = "UPDATE "._DB_PREFIX_."ranginesmspresta_mobiles SET active = 1 WHERE id_shop=".$id_shop." AND mobile='".$mobile."' AND otp='".$otp."';"; Db::getInstance()->execute($sql); return 'true'; } }else{ return 'کد تأیید نامعتبر است.'; } } private function isValidMobile($mobile) { return preg_match('/^[0-9]+$/', $mobile); } }