<?php
 if (!defined('_PS_VERSION_')) { exit; } class RangineSmsPresta extends Module { public $configs; public function __construct() { $this->preload(); $this->name = 'ranginesmspresta'; $this->tab = 'emailing'; $this->version = '2.3.17'; $this->author = 'Hadi Mollaei'; $this->support = 'https://rangine.ir/'; $this->need_instance = 0; $this->bootstrap = true; parent::__construct(); $this->displayName = $this->l('Rangine Sms Gateway'); $this->description = $this->l('Rangine sms web service for PrestaShop'); $this->confirmUninstall = $this->l('Are you sure you want to uninstall?'); $this->prefix = 'RANGINE_SMS_'; $context = Context::getContext(); $this->shop_id = (int)$context->shop->id; $this->shop = Configuration::get($this->prefix .'SHOPNAME' , null , null , $this->shop_id); $this->enable = Configuration::get($this->prefix .'SMSENABLE' , null , null , $this->shop_id); $this->PSversion = Configuration::get('PS_INSTALL_VERSION'); $this->domain = Configuration::get('PS_SHOP_DOMAIN'); $this->server = trim(Configuration::get($this->prefix .'PANELADDRESS' , null , null , $this->shop_id), "/ "); if(empty($this->server)) $this->server = 'https://sms.rangine.ir'; if(Configuration::get($this->prefix .'LICENSE' , null , null , $this->shop_id)) $this->license = unserialize(base64_decode(Configuration::get($this->prefix .'LICENSE' , null , null , $this->shop_id))); $this->cronpass = false; $this->folder = _PS_MODULE_DIR_.$this->name.'/'; $this->text = array( 'prosign' => '<span class="pro-version" title="'.$this->l('Only in Licensed Version').'">pro</span>', 'prosignlicensed' => '<span class="pro-version licensed" title="'.$this->l('Only in Licensed Version').'">pro</span>', ); $this->patterns = @file_get_contents(__DIR__.'/include/patternsmshumanity.txt'); } public function getVariables($action,$outputType){ $variables = array( '{gender}' => 'جنسیت', '{firstname}' => 'نام', '{lastname}' => 'نام خانوادگی', '{shop_name}' => 'نام فروشگاه', '{password}' => 'رمز عبور', '{email}' => 'آدرس ایمیل', '{order_id}' => 'شماره ردیف سفارش', '{order_reference}' => 'شناسه یکتای سفارش', '{payment}' => 'شیوه پرداخت', '{currency}' => 'واحد پول', '{carrier}' => 'حامل', '{total_paid}' => 'مبلغ پرداختی کل', '{invoice}' => 'لینک فاکتور', '{adminInvoice}' => 'لینک فاکتور مدیر', '{order_products}' => 'محصولات خریداری شده', '{cart_message}' => 'پیام سبد خرید', '{order_state}' => 'وضعیت سفارش', '{weekday}' => 'روز هفته سفارش', '{tracking}' => 'کد رهگیری ارسال سفارش', '{product_name}' => 'نام کامل محصول با ترکیب', '{product_name_only}' => 'تنها نام محصول', '{product_id}' => 'شناسه محصول', '{product_url}' => 'آدرس کوتاه محصول', '{product_fullurl}' => 'آدرس کامل محصول', '{sms_rule}' => 'اعمال قانون پیامکی در پیامک', ); $hookvariables = Hook::exec('rangineSmsPrestaVariables', array(), null, true); if (is_array($hookvariables) && count($hookvariables) > 0) { foreach($hookvariables as $hookname => $hookvars){ foreach($hookvars as $key => $value){ if (preg_match('/\{.*\}/', $key)) { $variables[$key] = $value; } } } } $actions = array( 'CustomerAccountAdd' => array('{gender}','{firstname}','{lastname}','{shop_name}','{password}','{email}','{sms_rule}'), 'ValidateOrder' => array('{gender}','{firstname}','{lastname}','{email}','{order_id}','{order_reference}','{shop_name}','{payment}','{currency}','{carrier}','{total_paid}','{invoice}','{adminInvoice}','{order_products}','{cart_message}','{sms_rule}'), 'OrderStatusPostUpdate' => array('{gender}','{firstname}','{lastname}','{email}','{order_id}','{order_reference}','{shop_name}','{order_state}','{payment}','{currency}','{carrier}','{weekday}','{total_paid}','{invoice}','{adminInvoice}','{order_products}','{cart_message}','{sms_rule}'), 'AdminOrdersTrackingNumberUpdate' => array('{gender}','{firstname}','{lastname}','{email}','{order_id}','{order_reference}','{shop_name}','{order_state}','{payment}','{currency}','{carrier}','{tracking}','{weekday}','{total_paid}','{invoice}','{adminInvoice}','{order_products}','{cart_message}','{sms_rule}'), 'ObjectAddressAddAfter' => array('{gender}','{firstname}','{lastname}','{shop_name}','{email}','{sms_rule}'), 'UpdateQuantity' => array('{product_name}','{product_name_only}','{product_id}','{shop_name}','{product_url}','{product_fullurl}','{sms_rule}'), 'DisplayAdminCustomers' => array('{gender}','{firstname}','{lastname}','{shop_name}','{email}','{sms_rule}'), 'DisplayAdminOrderLeft' => array('{gender}','{firstname}','{lastname}','{shop_name}','{email}','{order_id}','{order_reference}','{payment}','{total_paid}','{invoice}','{sms_rule}'), ); $hookactions = Hook::exec('rangineSmsPrestaActionsVariables', array(), null, true); if (is_array($hookactions) && count($hookactions) > 0) { foreach($hookactions as $hookname => $hookactionvars){ foreach($hookactionvars as $key => $value){ if(!isset($actions[$key])) $actions[$key] = array(); $actions[$key] = array_merge($actions[$key], $value); } } } if($outputType == 'link'){ $result = "<div class='variableDesc'><label>{$this->l('Variables:')}</label>"; foreach($actions[$action] as $var){ $result .= "<a class='rspvars' title='{$variables[$var]}' onclick='copyToClipboard(\"{$var}\")'><span class='name'>{$var}</span> <span class='desc'>{$variables[$var]}</span></a> "; } $result .= "<br>(جهت کپی به حافظه کلیک کنید)</div>"; } else { $result = array(); foreach($actions[$action] as $var){ $result[$var] = $variables[$var]; } } return $result; } public function variable_generator(){ return '<div class="modal fade pm-modal" tabindex="-1" role="dialog" id="variable-generator-modal">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<button type="button" class="close" data-dismiss="modal" aria-label="close">
								<span aria-hidden="true">&times;</span>
							</button>
							<h4 class="modal-title">متغیرساز افزونه - ویژه حرفه ای ها</h4>
						</div>
						<div class="modal-body">
							<fieldset class="input-group">
								<legend>منبع داده</legend>
								<div class="help">در دو فیلد زیر نام جدول دیتابیس (مانند: ps_orders) و نام ستونی که می خواهید داده آن را در پیامک درج کنید وارد نمایید. توجه کنید که نام جدول دیتابیس در هر سایت با توجه به پیشوند جداول (مانند ps_) تفاوت می کند.</div>
								<div class="row">
									<div class="col-25">
										<label for="data-table">نام جدول دیتابیس</label>
									</div>
									<div class="col-75">
										<input type="text" id="data-table" placeholder="Database Table Name">
									</div>
								</div>
								<div class="row">
									<div class="col-25">
										<label for="data-column">نام ستون جدول</label>
									</div>
									<div class="col-75">
										<input type="text" id="data-column" name="lastname" placeholder="Table Column Name">
									</div>
								</div>
							</fieldset>
							<fieldset class="input-group">
								<legend>شرط داده</legend>
								<div class="help">در دو فیلد زیر باید تعیین کنید که بر اساس چه ستونی می خواهید شرط تعیین کنید. مثلا اگر شما {order_id} را دارید و می خواهید داده ای را استخراج کنید که id آن مقدار مورد نظر شما باشد در ستون جدول id را وارد کنید و در مقدار ستون {order-id} را وارد نمایید.</div>
								<div class="row">
									<div class="col-25">
										<label for="con-column">نام ستون جدول</label>
									</div>
									<div class="col-75">
										<input type="text" id="con-column" placeholder="Column Name">
									</div>
								</div>
								<div class="row">
									<div class="col-25">
										<label for="column">مقدار ستون</label>
									</div>
									<div class="col-75">
										<input type="text" id="con-value" placeholder="Column value">
									</div>
								</div>
							</fieldset>
							<fieldset class="input-group">
								<legend>ایجاد متغیر</legend>
								<div class="row">
									<div class="col-25">
										<span class="var-generate btn btn-primary">ایجاد متغیر</span>
									</div>
									<div class="col-75">
										<input type="text" id="result" >
									</div>
								</div>
							</fieldset>
						</div>
						<div class="modal-footer">
							<div class="help">پس از ایجاد موفقیت آمیز یک متغیر می توانید آن را در هر جای پیامکی که مقدار شرط شما در متغیرهای آن کادر پیامکی هست کپی کنید</div>
							<button type="button" class="btn btn-default" data-dismiss="modal">close</button>
						</div>
					</div>
				</div>
			</div>
			<script>
				$(".var-generate").click(function(){
		var datacol = $("#data-column").val();
		var datatable = $("#data-table").val();
		var conditioncol = $("#con-column").val();
		var conditionvalue = $("#con-value").val();
		if(!datacol ||  !datatable || !conditioncol || !conditionvalue){
			alert("همه فیلدها را تکمیل نمایید!");
			$("#variable-generator-modal input#result").val("");
		}else{
			$result = "[["+datacol+"@"+datatable+":"+conditioncol+"="+conditionvalue+"]]";
			$("#variable-generator-modal input#result").val($result);
		}
	});
	</script>'; } public function extraVars($message = null){ if ($message == null) return ''; preg_match_all('/\[\[(\w*?)@(\w*?):(\w*?)=(.[^\[\]]*?)\]\]/m', $message, $matches, PREG_SET_ORDER, 0); if(count($matches)){ foreach($matches as $match){ $sql = new DbQuery(); $sql->select($match[1]); $sql->from($match[2], 't'); $sql->where("t.{$match[3]} = '{$match[4]}'"); $sql->limit(1); $result = Db::getInstance()->executeS($sql); $replace = ''; if($result && is_array($result)){ $replace = $result[0][$match[1]]; } $message = str_replace($match[0], $replace, $message); } $message = $this->extraVars($message); } return $message; } public function hookDashboardZoneOne($params) { $this->context->smarty->assign( array( 'ajax_link' => $this->context->link->getAdminLink('rangineAdminAjax'), 'link' => $this->context->link ) ); return $this->display(__FILE__, 'dashboard_rangine.tpl'); } public function hookDashboardData($params) { $auth = $this->panelAuth(); if (!class_exists('jDateTime')) { include_once('include/jDateTime.php'); } if($auth['ok'] == 'user' && is_numeric($auth['expireTime'])){ $expiredate = $auth['expireTime'] . ' ' . $this->l('Days'); }else{ $expiredate = $auth['expireTime']; } return array( 'data_value' => array( 'module_license' => (empty($this->license['expiretime'])) ? $this->l('Not Set!') : jDateTime::date('Y/m/d H:i', $this->license['expiretime'], null, true,null), 'panel_credit' => ($auth['ok'] == 'user') ? $auth['credit'] . ' ' . $this->l('Rials') : 'تنظیم نشده', 'panel_expire' => $expiredate, 'update_time' => ($auth['ok'] == 'user') ? $this->timeago($auth['updateTime']) : '---', ), ); } public function install() { $error = 0; if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } if (!extension_loaded('curl')) { return false; } if (!$this->installConfig()) { return false; } if (!$this->installDatabase()) { return false; } if(!parent::install() or !$this->installModuleTab($this->name, $this->displayName, (int)Tab::getIdFromClassName('CONFIGURE'),$this->name) or !$this->installModuleTab('rangineAdminAjax', 'Rangine Ajax Class', -1,$this->name) ) return false; include_once('include/hooks.php'); foreach($this->hooks as $hook){ if (!$this->registerHook($hook)) $error = 1; } if($error == 1) return false; else return true; } public function uninstall() { if(Configuration::get($this->prefix .'UNINSTALLDB' , null , null , null) == '1'){ if (!$this->unistallDatabase()) { return false; } } if (!$this->uninstallConfig()) { return false; } if (!parent::uninstall()) { return false; } if (!$this->uninstallModuleTab($this->name)) { return false; } if (!$this->uninstallModuleTab('rangineAdminAjax')) { return false; } return true; } protected function installConfig() { include_once('include/configs.php'); foreach($this->configs as $key => $value){ if (!Configuration::updateValue($this->prefix . $key, $value)) return false; } return true; } protected function uninstallConfig() { include_once('include/configs.php'); foreach($this->configs as $key => $value){ if (!Configuration::deleteByName($this->prefix . $key)) return false; } return true; } public function installDatabase() { $sql = 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . $this->name . '`(
                `id_ranginesmspresta` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
                `customer` VARCHAR(5) DEFAULT NULL ,
                `id_order` VARCHAR(10) DEFAULT NULL ,
                `phone` VARCHAR(100) DEFAULT NULL ,
                `position` VARCHAR(50) DEFAULT NULL ,
                `status` VARCHAR(15) NOT NULL ,
                `bulk` varchar(50) DEFAULT NULL,
                `delivery` varchar(50) DEFAULT NULL,
                `description` TEXT DEFAULT NULL,
				`timestamp` varchar(15) DEFAULT NULL,
				`type` varchar(10) DEFAULT NULL,
				`shop` varchar(10) DEFAULT NULL,
				`duration` varchar(50) DEFAULT NULL
                 )ENGINE=' . _MYSQL_ENGINE_ . ' DEFAULT CHARSET=utf8;'; $sql .= "CREATE TABLE IF NOT EXISTS `" . _DB_PREFIX_ . "ranginesmspresta_oos`(
			  `id_customer` int(10) unsigned DEFAULT '0',
			  `phone_number` varchar(15) NOT NULL,
			  `id_product` int(10) unsigned NOT NULL,
			  `id_product_attribute` int(10) unsigned NOT NULL,
			  `id_shop` int(10) unsigned NOT NULL,
			  `id_lang` int(10) unsigned NOT NULL,
			  `timestamp` varchar(10) DEFAULT NULL,
			  PRIMARY KEY (`phone_number`,`id_product`,`id_product_attribute`,`id_shop`)
			) ENGINE=" . _MYSQL_ENGINE_ . " DEFAULT CHARSET=utf8;"; $sql .= 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'ranginesmspresta_sms` (
			  `id` int(11) NOT NULL AUTO_INCREMENT,
			  `text` text COLLATE utf8_persian_ci NOT NULL,
			  `weight` int(3) DEFAULT NULL,
			  PRIMARY KEY (`id`)
			) ENGINE=' . _MYSQL_ENGINE_ . ' AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_persian_ci;'; $sql .= 'CREATE TABLE IF NOT EXISTS `' . _DB_PREFIX_ . 'ranginesmspresta_mobiles` (
			`id` int(6) NOT NULL AUTO_INCREMENT,
            `id_customer` int(10) unsigned NOT NULL DEFAULT \'1\',
            `id_shop` int(10) unsigned NOT NULL DEFAULT \'1\',
            `id_shop_group` int(10) unsigned NOT NULL DEFAULT \'1\',
            `mobile` varchar(15) NOT NULL,
            `active` TINYINT(1) NOT NULL DEFAULT \'0\',
			`otp` int(10) DEFAULT NULL,
			`timestamp` varchar(10) NOT NULL,
            PRIMARY KEY(`id`)
        ) ENGINE='._MYSQL_ENGINE_.' default CHARSET=utf8'; return Db::getInstance()->execute($sql); } protected function unistallDatabase() { $sql = 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'ranginesmspresta`;'; $sql .= 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'ranginesmspresta_oos`;'; $sql .= 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'ranginesmspresta_sms`;'; $sql .= 'DROP TABLE IF EXISTS `' . _DB_PREFIX_ . 'ranginesmspresta_mobiles`;'; return Db::getInstance()->execute($sql); } protected function emptyDatabase() { $sql = 'TRUNCATE TABLE `' . _DB_PREFIX_ . $this->name . '`'; return Db::getInstance()->execute($sql); } public function installModuleTab($tabClass, $tabName, $idTabParent, $modulename) { $tab = new Tab(); $tab->active = 1; $tab->name[(int)Configuration::get('PS_LANG_DEFAULT')] = $tabName; $tab->class_name = $tabClass; $tab->module = $modulename; $tab->id_parent = $idTabParent; $tab->module = $this->name; if ($tab->save()) { return true; } return false; } public function uninstallModuleTab($tabClass) { $id_tab = (int)Tab::getIdFromClassName($tabClass); if ($id_tab) { $tab = new Tab($id_tab); return $tab->delete(); } return false; } public function preload() { if (Tools::getValue('controller') != '' && Tools::getValue('controller') == 'ranginesmspresta') { $token = Tools::getAdminTokenLite('AdminModules'); $request_scheme = Tools::getShopProtocol(); $hostlink = $request_scheme . $_SERVER['SERVER_NAME'] . $_SERVER['PHP_SELF']; $ctrlconfi = "?controller=AdminModules&configure=" . Tools::getValue('controller'); $urlLink = $hostlink . $ctrlconfi ."&token=" . $token; Tools::redirect($urlLink); } } private function moduleSubpageUrl($subpage = null) { $token = Tools::getAdminTokenLite('AdminModules'); $request_scheme = Tools::getShopProtocol(); $hostlink = $request_scheme . $_SERVER['SERVER_NAME'] . $_SERVER['SCRIPT_NAME']; $ctrlconfi = "?controller=AdminModules&configure=" . $this->name; $urlLink = $hostlink . $ctrlconfi ."&token=" . $token; if($subpage) $urlLink .= "&subpage=" . $subpage; return $urlLink; } public function getContent() { if (!extension_loaded('curl')) { return $this->displayError($this->l('cURL is not enabled. You should enable it before using thes module.')); } $output = null; $license = isset($this->license['expiretime']) ? $this->license['expiretime'] : ''; $time = time(); $errors = array(); include('include/submit.php'); $auth = $this->panelAuth(); $this->smarty->assign(array( 'auth' => $auth, 'alerttype' => 'info', )); if(isset($this->context->cookie->redirect_errors)){ $output .= $this->displayError($this->context->cookie->redirect_errors); unset($this->context->cookie->redirect_errors); } if(isset($this->context->cookie->redirect_success_message)){ $output .= '<div class="alert alert-success"><button type="button" class="close" data-dismiss="alert">×</button>'.$this->context->cookie->redirect_success_message.'<div></div></div>'; unset($this->context->cookie->redirect_success_message); } $output .= $this->display(__FILE__, 'views/templates/admin/headerinfo.tpl'); $gatewayDescription = $gatewayWarning = $gatewaySuccess = $gatewayError = null; if ($auth['ok'] == 'user') { $sendnumber = str_replace('+98', '', Configuration::get($this->prefix .'SMSNUMBER' , null , null , $this->shop_id)); $sendKhadamatiNumber = str_replace('+98', '', Configuration::get($this->prefix .'SMSSENUMBER' , null , null , $this->shop_id)); if (in_array($sendnumber, $auth['lines'])) { $gatewaySuccess = $this->l('The gateway configured correctly!').' ' .$this->l('Your remain credit is: ') .' ' .$auth['credit'].' ' .$this->l('rials').', ' .$this->l('And your account expire time is after').' ' .$auth['expireTime'].' ' .$this->l('days'); if($auth['updateTime']) $gatewaySuccess .= ' ('.$this->l('Panel info check time:').' '.$this->timeago($auth['updateTime']).')'; if($auth['expireTime'] < 30) $gatewaySuccess .= '<br>' . $this->l('Please contact to Rangine SMS Service to extend panel for one year.'); if($auth['credit'] < 4000) $gatewaySuccess .= '<br>'.$this->l('Your credit is low.').'<a href="http://sms.rangine.ir" target="_blank">' . $this->l('Please go to your account and charge it.') . '</a>'; } else { $gatewayWarning .= $this->l('The user and pass are correct but this line is not belong to you: ').$sendnumber.'.'; } if ($sendKhadamatiNumber != '' and $sendKhadamatiNumber != null and !in_array($sendKhadamatiNumber, $auth['lines'])) { $gatewayWarning .= $this->l(' Service line is not belong to you: ').$sendKhadamatiNumber.'.'; } if (Configuration::get($this->prefix .'NEWACADTETYPE' , null , null , $this->shop_id) == 'sample' or Configuration::get($this->prefix .'NEWACCUTETYPE' , null , null , $this->shop_id) == 'sample' or Configuration::get($this->prefix .'NEWORADTETYPE' , null , null , $this->shop_id) == 'sample' or Configuration::get($this->prefix .'NEWORCUTETYPE' , null , null , $this->shop_id) == 'sample' or Configuration::get($this->prefix .'UPORCUTETYPE' , null , null , $this->shop_id) == 'sample') { if ($sendKhadamatiNumber == '' or !in_array($sendKhadamatiNumber, $auth['lines'])) { $gatewayError = $this->l('You select sample for one of your sms messages but you don\'t specify Service line or it is not belong to you: ').$sendKhadamatiNumber; } } } elseif ($auth['ok'] == 'demo') { $gatewayDescription = $this->l('You are testing our demo services. The maximum amount of utilization of these services depends on our support section. If you have questions about the system and purchase a panel, you can contact 09191483567 with a call, text message or telegram.'); } else { $gatewayError = $auth['error']; } if (version_compare(_PS_VERSION_, '1.6.1', '>=') === false) { $gatewayDescription= $gatewayDescription.$gatewayWarning.$gatewaySuccess.$gatewayError; } $helper = new HelperForm(); $helper->module = $this; $helper->name_controller = $this->name; $helper->token = Tools::getAdminTokenLite('AdminModules'); $helper->show_toolbar = false; $helper->toolbar_scroll = false; $helper->table = $this->table; $lang = new Language((int)Configuration::get('PS_LANG_DEFAULT')); $helper->default_form_language = $lang->id; $allow_employee_form_lang = Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG'); $helper->allow_employee_form_lang = $allow_employee_form_lang ? $allow_employee_form_lang : 0; $this->fields_form = array(); $helper->submit_action = $this->name; $helper->currentIndex = $this->context->link->getAdminLink('AdminModules', false). '&configure='.$this->name.'&tab_module='.$this->tab.'&module_name='.$this->name; $helper->tpl_vars = array( 'fields_value' => $this->getConfigFieldsValues(), 'languages' => $this->context->controller->getLanguages(), 'id_language' => $this->context->language->id ); if($auth['ok'] == 'user' or $auth['ok'] == 'demo') $disabled = 0; else $disabled = 1; if($submited != '') { $activePage = $submited; } else { $activePage = Tools::getValue('subpage') ? Tools::getValue('subpage') : 'welcome'; } $output .= "<div class='row ". $this->name ."settings'>"; $output .= $this->moduleTabs($activePage); $output .= "<div class='col-lg-10 col-sm-9'>"; $ranginemodal = '
	<div class="modal fade" id="rangineModal">
	  <div class="modal-dialog">
		<div class="modal-content">
		  <div class="modal-header">
			<button type="button" class="close modal-clear" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">×</span></button>
			<h4 class="modal-title"></h4>
		  </div>
		  <div class="modal-body">
			<center><span class="loader"></span></center>
		  </div>
		  <div class="modal-footer">
			<button type="button" class="btn btn-default modal-clear" data-dismiss="modal">'.$this->l('Close').'</button>
			
		  </div>
		</div><!-- /.modal-content -->
	  </div><!-- /.modal-dialog -->
	</div><!-- /.modal -->'; switch($activePage){ case 'gatewaysettings': include_once('include/gatewayform.php'); $output .= $helper->generateForm(array($fields_form_gateway)); break; case 'alertssettings': include_once('include/alertsform.php'); $output .= $helper->generateForm(array($fields_form_alerts)); break; case 'sendsms': if($disabled == 1) { $output .= '<div class="panel">	<div class="panel-heading"><i class="icon-paper-plane"></i>'.$this->l('Send SMS').'</div><div class="content">	<p>'.$this->l('Please config SMS Gateway first.').'</p></div></div>'; break; } include_once('include/sendsmsform.php'); $output .= $helper->generateForm(array($fields_form_send_sms)); $output .= "<script>$('#PREPAREDTEXT').on('change', function(){if(this.value != '0') $('#SENDONETEXT').val(this.value);});</script>"; break; case 'sendtoall': if($disabled == 1) { $output .= '<div class="panel">	<div class="panel-heading"><i class="icon-paper-plane"></i>'.$this->l('Send sms to customers').'</div><div class="content">	<p>'.$this->l('Please config SMS Gateway first.').'</p></div></div>'; break; } include_once('include/sendtoallform.php'); $output .= $helper->generateForm(array($fields_form_send_all_customers)); break; case 'customersmstexts': include_once('include/customersmstextform.php'); $output .= $helper->generateForm(array($fields_form_sms_texts)); $output .= $ranginemodal; break; case 'adminsmstexts': include_once('include/adminsmstextform.php'); $output .= $helper->generateForm(array($fields_form_sms_texts)); $output .= $ranginemodal; break; case 'preparedsms': include_once('include/preparedsms.php'); break; case 'sentsms': $output .= $this->logsPage(); break; case 'oosSubscribers': include_once('include/oos.php'); break; case 'remotesms': include_once('include/remotesms.php'); break; case 'verifymobile': include_once('include/verifymobile.php'); break; case 'timedsms': include_once('include/timedsms.php'); break; case 'smsrules': include_once('include/smsrules.php'); break; case 'testsystem': include_once('include/testsystem.php'); break; case 'api': $api = new RangineSmsPrestaApi; $output .= '<div class="panel" id="fieldset_welcome"><div class="panel-heading"><i class="icon-code"></i>'.$this->l('Api Document').'</div><div class="content">'.$api->help.'</div></div></div>'; break; case 'suggestion': include_once('include/suggestion.php'); break; case 'welcome': include_once('include/welcomepage.php'); $output .= $welcomePage; break; default: $pagehook = Hook::exec('actionRangineSmsPrestaPageOutput',array('helper'=>$helper),null,true); if(is_array($pagehook) && count($pagehook) > 0){ foreach($pagehook as $module => $pagearray){ if (is_array($pagearray) && isset($pagearray[$activePage])) { $licaddons = $this->licenseCheck(); if($licaddons['status'] == 'true' && in_array($activePage, $licaddons['addons'])) { $pagename = 'افزونه اختصاصی'; $tabhook = Hook::exec('actionRangineSmsPrestaModuleAddons', array(), null, true); if (is_array($tabhook) && count($tabhook) > 0 && isset($tabhook[$module]) && isset($tabhook[$module][$activePage])) { $pagename = $tabhook[$module][$activePage]; } $output .= $this->pageBuilder($pagename, $pagearray[$activePage],null,$pagearray['fullpage']); $output .= $ranginemodal; } elseif($licaddons['status'] == 'true') { $output .= $this->pageBuilder('بروز خطای لایسنس', 'متأسفانه لایسنس افزونه اجازه استفاده از این صفحه را نمی دهد. در صورتی که افزونه را خریده اید روی دکمه بازبینی لایسنس کلیک کنید. <button class="refereshLicense btn btn-info" data-action="refereshLicense" title="زمانی که مشکلی در مشاهده صفحات لایسنس دار داشتید روی این دکمه کلیک کنید.">بازبینی لایسنس</button></br>و در صورتی که افزونه را هنوز تهیه نکرده اید، جهت خرید به این صفحه مراجعه کنید.<a href="https://rangine.ir/products/prestashop/'.$activePage.'" class="btn btn-success" target="_blank">خرید افزونه</button>',null,true); } else { $output .= $this->licenseForm(); } } } } else { include_once('include/welcomepage.php'); $output .= $welcomePage; } break; } $output .="</div>"; $output .="</div>"; if($this->license['expiretime'] !== '' && is_numeric($this->license['expiretime']) && $this->license['expiretime'] - time() > 0){ $output .="<style>.pro-version{background: #5fdb29;}</style>"; } return $output; } public function licenseForm($addons = false){ $output = ''; if($this->licenseCheck() == 'expire'){ $output .= '<p class="desc">تاریخ انقضای لایسنس این ویژگی افزونه به پایان رسیده است. برای تهیه لایسنس جدید با پشتیبان افزونه تماس بگیرید.</p>'; } if($addons){ $output .='<p class="desc">مشکلی در اجرای صفحه وجود دارد. اگر این افزودنی را خریداری کرده اید با پشتیبانی تماس بگیرید.</p>'; } else { $output .='<p class="desc">اکثر امکانات این افزونه رایگان است. بخشی از امکانات که با علامت <span style="background: red;color: #fff;display: inline-block;padding: 1px 5px;border-radius: 9px;font-size: 10px;margin: 0 5px;cursor: help;">pro</span> مشخص شده است با خرید و ثبت لایسنس فعال می گردد. در آینده نیز امکانات جدیدی برای نسخه لایسنس دار اضافه خواهد شد. <a href="https://rangine.ir/pay?for=prestashop_smsmodule&panel='.$this->domain.'" target="_blank">برای تهیه لایسنس اینجا کلیک کنید.</a></p><p>اگر تا به حال لایسنس تهیه نکرده اید می توانید قبل از خرید لایسنس با وارد کردن کلمه test در کادر لایسنس زیر تا یک هفته از نسخه لایسنس دار استفاده کنید!</p>
		   <p>آدرسی که برای سایت شما در دیتابیس وجود دارد: '.$this->domain.' (برای دریافت لایسنس این آدرس را به پشتیبان افزونه اطلاع دهید.)</p>
			<div class="row">
			 <form class="form-horizontal field col-sm-12" method="post">
				<div class="row">
				   <div class="form-group">
					  <label class="col-sm-4 text-left">کد لایسنس :</label>
					  <div class="col-sm-4">
						 <input class="form-control text-left" name="license" value="test" type="text">
					  </div>
					   <div class="col-sm-4">
						  <button type="submit" name="setLisense" class="btn btn-primary sn-btn"><b>ثبت</b></button>
						  <a href="https://rangine.ir/pay?for=prestashop_smsmodule&panel='.$this->domain.'" target="_blank">تهیه لایسنس</a>
					   </div>
				   </div>
				</div>
			 </form>
			</div>'; } return $this->pageBuilder('ثبت لایسنس', $output, 'icon-check-circle',true); } public function pageBuilder($pageName, $pageBody, $icon = 'icon-cogs', $fullpage = false){ if($fullpage) { $output ='<div class="panel panel-default">
	   <div class="panel-heading" style="white-space: unset">
		  <i style="margin:10px 5px;" class="'.$icon.'"></i><b data-toggle="collapse" data-target="#collapsed-target" style="cursor: pointer;">'.$pageName.'</b>
	   </div>
	   <div class="panel-body collapse in" id="collapsed-target">'.$pageBody.'</div></div>'; }else{ $output = $pageBody; } return $output; } private function moduleTabs($activePage){ $pagesArray = array( 'welcome' => $this->l('Welcome'), 'gatewaysettings' => $this->l('Gateway Settings'), 'alertssettings' => $this->l('Alerts Settings'), 'customersmstexts' => $this->l('Customer SMS Texts'), 'adminsmstexts' => $this->l('Admin SMS Texts'), 'sendsms' => $this->l('Send SMS'), 'sendtoall' => $this->l('Send to All'), 'sentsms' => $this->l('Sent SMS'), 'preparedsms' => ($this->licenseCheck() == 'true') ? $this->l('Prepared SMS').$this->text['prosignlicensed'] : $this->l('Prepared SMS').$this->text['prosign'], 'oosSubscribers' => ($this->licenseCheck() == 'true') ? $this->l('Out of Stock').$this->text['prosignlicensed'] : $this->l('Out of Stock').$this->text['prosign'], 'remotesms' => ($this->licenseCheck() == 'true') ? $this->l('Remote SMS Management').$this->text['prosignlicensed'] : $this->l('Remote SMS Management').$this->text['prosign'], 'smsrules' => ($this->licenseCheck() == 'true') ? $this->l('SMS Rules').$this->text['prosignlicensed'] : $this->l('SMS Rules').$this->text['prosign'], 'verifymobile' => $this->l('Mobile Verify')." (آزمایشی)", 'testsystem' => $this->l('Test System'), 'suggestion' => $this->l('Our Suggestion'), 'api' => $this->l('Api Document'), ); $hook = Hook::exec('actionRangineSmsPrestaModuleAddons', array(), null, true); if (is_array($hook) && count($hook) > 0) { foreach($hook as $key => $tab){ $pagesArray[$key] = ($this->licenseCheck() == 'true') ? $tab.$this->text['prosignlicensed'] : $tab[$key].$this->text['prosign']; } } $output = "<div class='ranginesmsprestatabs col-lg-2 col-sm-3'><div class='list-group'>"; foreach($pagesArray as $key => $value){ if($activePage == $key) { $class = 'class="'.$key.' list-group-item active"'; $href = $this->moduleSubpageUrl($key); } else { $class = 'class="'.$key.' list-group-item"'; $href = $this->moduleSubpageUrl($key); } $output .= "<a href='$href' $class>$value</a>"; } $output .= '</div></div>'; return $output; } public function getConfigFieldsValues() { include_once('include/configs.php'); $output = array(); foreach($this->configs as $key => $value){ $output[$key] = Tools::getValue($key, Configuration::get($this->prefix . $key , null , null , $this->shop_id)); } $output['RECIVER'] = Tools::getValue('RECIVER'); $output['SENDONETEXT'] = Tools::getValue('SENDONETEXT'); $output['SENDALLTEXT'] = Tools::getValue('SENDALLTEXT'); $output['PREPAREDTEXT'] = '0'; $output['preparedSmsText'] = ''; $output['SENTOALLSENDERLINE'] = '500010707'; $output['SENTOALLDELAYTIME'] = 15; $output['SENTOALLPERONCE'] = ''; $output['SENTOALLBETWEENTIME'] = 30; $output['MobileInputName'] = ''; $output['MobileInputSelector'] = ''; return $output; } public function hookBackOfficeHeader() { if (version_compare(_PS_VERSION_, '1.7', '>') == true) { $predefendedsmstext = str_replace(array( '"' ), array( "'" ), $this->preparedSMSoptions()); }else{ $predefendedsmstext = str_replace(array( "\n", "\r", '"' ), array( "\\n", "\\r", "\\'" ), $this->preparedSMSoptions()); } $alertcredit = $ranginetopmenu = 0; $auth = $this->panelAuth(); if(Configuration::get($this->prefix .'LOWCREDITALERT' , null , null , null) == '1' &&$auth['ok'] == 'user' && $auth['credit'] < 10000){ $alertcredit = 1; } if(Configuration::get($this->prefix .'TOPMENU' , null , null , null) == '1'){ $ranginetopmenu = 1; } $this->context->controller->addCSS($this->_path . 'views/css/icon.css'); $predefendedsmstext = '---'; Media::addJsDef( array( 'rangineUri' => '//'.Configuration::get('PS_SHOP_DOMAIN_SSL').'/modules/'.$this->name.'/', 'rangineAdminPage' => $this->moduleSubpageUrl(), 'updateOrderStatusSmsAlert' => Configuration::get($this->prefix .'UPDATEORDERC' , null , null , $this->shop_id), 'updateOrderTrackingSmsAlert' => Configuration::get($this->prefix .'ORDERTRACKING' , null , null , $this->shop_id), 'predefendedsmstext' => $predefendedsmstext, 'ranginesmspresta_ajax_url' => $this->context->link->getAdminLink('rangineAdminAjax'), 'ranginelowcreditalert' => $alertcredit, 'ranginetopmenu' => $ranginetopmenu, ) ); } public function hookCreateAccountForm() { if(Configuration::get($this->prefix . 'VEFRIFYMOBILEENABLE' , null , null , $this->shop_id) == 0) return; $output = "
<script>
$('#mobilenumbersend').click(function(){
	var phonenumber = $('.account_mobile_verify #mobilenumber').val();
	var query = $.ajax({
		type: 'POST',
		url: ranginesmspresta_verification_url,
		data: 'phonenumber=' + phonenumber,
		dataType: 'json',
		beforeSend: function(){
			$('#mobilenumbersend').after('<i class=\'process-icon-loading\'></i> <span class=\'loading\'> منتظر بمانید... </span>');
		},
		success: function(json) {
			$('.loading').remove();
			switch(json.result){
				case 'true':
					$('#mobilenumbersend').hide().after('<input type=\'button\' id=\'changemobilenumber\' value=\'".$this->l('Change Mobile Number')."\'><div id=\'otpwrapper\'><label for\'verifyOTP\'>".$this->l('Type your recived code :')."</label><input type=\'text\' id=\'verifyOTP\' value=\'\'><input type=\'button\' id=\'sendverifyOTP\' value=\'".$this->l('Send OTP')."\'></div>');
					$('#sendverifyOTP').click(function(){
						var otp = $('#verifyOTP').val();
						var query = $.ajax({
							type: 'POST',
							url: ranginesmspresta_verification_url,
							beforeSend: function(){
								$('#sendverifyOTP').after('<i class=\'process-icon-loading\'></i> <span class=\'loading\'> منتظر بمانید... </span>');
							},
							data: 'phonenumber=' + phonenumber + '&otp=' + otp,
							dataType: 'json',
							success: function(json2) {
								$('.loading').remove();
								switch(json.result){
									case 'true':
										$('#otpwrapper,#changemobilenumber').remove()
										$('#mobilenumbersend,.account_mobile_verify label').hide();
										$('.account_mobile_verify #mobilenumber').hide().addClass('verified').after('<input type=\'hidden\' name=\'verified\' value=\'1\'/><p class=\'verifiedmobile\'>شماره همراه ' + phonenumber + ' تأیید شد.</p>');
										
										break;
									default:
										alert(json.result);
										break;
								}
							}
						});
					});
					$('#changemobilenumber').click(function(){
						$('#mobilenumbersend').show();
						$('#otpwrapper,#changemobilenumber').remove();
						
					});
					break;
				default:
					alert(json.result);
					break;
			}
		}
	});
});
"; if(Configuration::get($this->prefix . 'VEFRIFYMOBILEMANDATORY' , null , null , $this->shop_id)){ $output .= "
	$('form#account-creation_form button#submitAccount').click(function(){
		if(!$('.account_mobile_verify #mobilenumber').hasClass('verified')) {
			alert('برای ثبت نام تأیید شماره موبایل الزامی است.');
			return false;
		}
	});
	"; } $output .= "
</script>
<style>
input#mobilenumber.verified {
    background-color: #fff;
    border: none;
    font-weight: bold;
    color: #078c49;
}
p.verifiedmobile {
    color: #078c49;
}
</style>
		"; return $this->display(__FILE__, 'accountform.tpl').$output; } public function hookActionBeforeSubmitAccount($params = array()) { if(Configuration::get($this->prefix . 'VEFRIFYMOBILEMANDATORY' , null , null , $this->shop_id)){ if(Tools::getValue('mobilenumber') == '' || Tools::getValue('verified') != 1 ){ $this->context->controller->errors[] = $this->l('You Must verify your phone number!'); return false; }else{ $mobile = Tools::getValue('mobilenumber'); $checkMobileExistsSql = "SELECT * FROM "._DB_PREFIX_. "ranginesmspresta_mobiles WHERE id_shop=".(int) $this->shop_id." AND mobile='".pSQL($mobile)."' AND active = 1;"; if (!Db::getInstance()->getRow($checkMobileExistsSql)) { $this->context->controller->errors[] = $this->l('You Must verify your phone number!'); return false; } } } return true; } public function hookActionSubmitAccountBefore($params = array()) { return $this->hookActionBeforeSubmitAccount($params); } public function hookAdditionalCustomerFormFields($params) { if(Configuration::get($this->prefix . 'VEFRIFYMOBILEENABLE' , null , null , $this->shop_id) == 0) return; $mobileField = new FormField(); $mobileField->setName('mobilenumber'); $mobileField->setType('text'); $mobileField->setLabel($this->l('Mobile')); $mobileField->addAvailableValue('placeholder', 'شماره همراه خود را وارد نمایید'); if(Configuration::get($this->prefix . 'VEFRIFYMOBILEMANDATORY' , null , null , $this->shop_id)){ $mobileField->setRequired(true); } return array( $mobileField ); } public function hookDisplayCustomerAccountFormTop($params) { $output="
"; $output .= "
<style>
input#mobilenumber.verified {
    background-color: #fff;
    border: none;
    font-weight: bold;
    color: #078c49;
}
p.verifiedmobile {
    color: #078c49;
}
</style>
		"; return $output; if(Tools::getValue('mobileNotVerify')){ return '<div class="alert alert-danger">لطفا کد تایید موبایل را وارد نمایید.</div>'; } return; } public function hookDisplayCustomerIdentityForm($params) { $idCustomer = $this->context->customer->id; $query = "SELECT mobile FROM "._DB_PREFIX_."ranginesmspresta_mobiles WHERE id_customer='" . $idCustomer."';"; if ($mobile = Db::getInstance()->getRow($query)) { $customerMobileNumber = $mobile['mobile']; return $this->l('Your verified mobile number:'). $customerMobileNumber; } else { return ''; } } private function getHookVarsValues($action, $vars, $params){ $hookVarsValue = Hook::exec('rangineSmsPrestaActionsVarsValue', array('action'=>$action, 'vars'=>$vars,'cookie'=>array(1), 'params'=>$params), null, true); if (is_array($hookVarsValue) && count($hookVarsValue) > 0) { $this->debug($hookVarsValue,'hookVarsValue'); foreach($hookVarsValue as $hookname => $varsValue){ foreach($varsValue as $key => $value){ $vars[$key] = $value; } } } return $vars; } private function getHookCustomerPhone($action, $phone, $customer_id){ $hookCustomerPhone = Hook::exec('rangineSmsPrestaCustomerPhone', array('action'=>$action,'cookie'=>array(1), 'customerid'=>$customer_id), null, true); if (is_array($hookCustomerPhone) && count($hookCustomerPhone) > 0) { $this->debug($hookCustomerPhone,'hookCustomerPhone'); $phone = array_shift($hookCustomerPhone); } return $phone; } public function hookActionCustomerAccountAdd($params,$test = null) { $testresult = ''; if (!$this->enable) { if($test) return 'سیستم پیامک فعال نیست.'; return true; } if (Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id) == '' or Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id) == '') { if($test) return 'تنظیمات درگاه به درستی وارد نشده است.'; return true; } if (is_object($params['newCustomer'])) { $newCustomer = get_object_vars($params['newCustomer']); } $gender = new Gender((int)$newCustomer['id_gender'], $this->context->language->id); $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($newCustomer['firstname']), '{lastname}' => $this->sanitizeURL($newCustomer['lastname']), '{shop_name}' => $this->shop, '{password}' => '', '{email}' => $newCustomer['email'], ); if(isset($_POST['password'])){ $vars['{password}'] = $_POST['password']; }elseif(isset($params['_POST']['passwd'])){ $vars['{password}'] = $params['_POST']['passwd']; }elseif($newCustomer['email'] == 'test@rangine.ir'){ $vars['{password}'] = $newCustomer['password']; } $vars = $this->getHookVarsValues('CustomerAccountAdd' , $vars, $params); if (Configuration::get($this->prefix . 'NEWCUSTOMERA' , null , null , $this->shop_id) != 0 and Configuration::get($this->prefix . 'ADMINPHONE' , null , null , $this->shop_id) !== '') { $AdminPhone = Configuration::get($this->prefix . 'ADMINPHONE' , null , null , $this->shop_id); if ($text = $this->generateSMStext($vars, 'newacount', 'admin', null ,$params, $AdminPhone)) { $smsResult = $this->sendOne($text, $AdminPhone, '-', '-', $this->l('New Customer')); if($test && $smsResult == 'sent') { $testresult .= 'پیامک به مدیر (' . $AdminPhone . ') ارسال شد.<br>'; }elseif($test && $smsResult == 'queue'){ $testresult .= 'پیامک به مدیر (' . $AdminPhone . ') در صف ارسال قرار گرفت.<br>'; }elseif($test && $smsResult == 'notsendbyrule'){ $testresult .= 'پیامک به مدیر (' . $AdminPhone . ') به خاطر انطباق با یک قانون پیامکی ارسال نشد.<br>'; }elseif($test){ $testresult .= 'ارسال به مدیر انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.<br>'; } } }elseif($test){ $testresult .= 'هشدار به مدیر هنگام ثبت نام مشتری غیرفعال است و یا شماره همراه مدیر در صفحه تنظیمات درگاه ثبت نشده است.<br>'; } if (Configuration::get($this->prefix.'NEWCUSTOMERC' , null , null , $this->shop_id) != 0) { if($test){ $phone = $newCustomer['phone']; }elseif(Tools::getValue('mobilenumber') != ''){ $id_customer = $newCustomer['id']; $id_shop = $newCustomer['id_shop']; $id_shop_group = $newCustomer['id_shop_group']; $mobile = Tools::getValue('mobilenumber'); $checkMobileExistsSql = "SELECT * FROM "._DB_PREFIX_. "ranginesmspresta_mobiles WHERE id_shop=".(int) $id_shop." AND mobile='".pSQL($mobile)."';"; if (Db::getInstance()->getRow($checkMobileExistsSql)) { $sql = 'UPDATE '._DB_PREFIX_.'ranginesmspresta_mobiles SET id_customer = '.$id_customer.' WHERE mobile = "'.$mobile.'" AND id_shop = '.$id_shop.' AND id_shop_group = '.$id_shop_group; Db::getInstance()->execute($sql); $phone = $mobile; } }elseif(isset($params['_POST']['psy-otp']) && Tools::getValue('username') != '' && is_numeric(Tools::getValue('username'))){ $id_customer = $newCustomer['id']; $id_shop = $newCustomer['id_shop']; $id_shop_group = $newCustomer['id_shop_group']; $mobile = Tools::getValue('username'); $phone = $mobile; }else{ $id_address = Address::getFirstCustomerAddressId($newCustomer['id']); $customerAddress = new AddressCore($id_address); $phone = $customerAddress->phone_mobile; } $phone = $this->getHookCustomerPhone('CustomerAccountAdd', $phone, $newCustomer['id']); if ($phone and !Tools::strlen($phone) < 10) { if ($text = $this->generateSMStext($vars, 'newacount', 'customer', null , $params, $phone)) { $smsResult = $this->sendOne($text, $phone, $newCustomer['id'], '-', $this->l('New Customer')); if($test && $smsResult == 'sent') { $testresult .= 'پیامک به مشتری (' . $phone . ') ارسال شد.<br>'; }elseif($test && $smsResult == 'queue'){ $testresult .= 'پیامک به مشتری (' . $phone . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ $testresult .= 'پیامک به مشتری (' . $phone . ') به خاطر انطباق با یک قانون پیامکی ارسال نشد.'; }elseif($test){ $testresult .= 'ارسال به مشتری انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } } } }elseif($test){ $testresult .= 'هشدار به مشتری هنگام ثبت نام غیرفعال است.<br>'; } if($test) return $testresult; return true; } public function hookActionValidateOrder($params, $test = null) { $testresult = ''; if (!$this->enable) { if($test) return 'سیستم پیامک فعال نیست.'; return; } if (Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id) == '' or Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id) == '') { if($test) return 'تنظیمات درگاه به درستی وارد نشده است.'; return; } $phone = ''; $order = $params['order']; $customer = $params['customer']; $currency = $params['currency']; $gender = new Gender((int)$customer->id_gender, $this->context->language->id); if($test) $carrier = $params['carrier']; else $carrier = new Carrier((int) $order->id_carrier); if($test){ $products = $order->products; }else{ $product_list=$order->getProducts(); $products = ''; foreach($product_list as $product){ $products .= $product['product_name'].' * ' .$product['product_quantity']."-"; } } $messageArray = Message::getMessagesByOrderId($order->id); if(is_array($messageArray) && isset($messageArray[0]['message'])){ $cart_message = $messageArray[0]['message']; } else { $cart_message = ''; } $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($customer->firstname), '{lastname}' => $this->sanitizeURL($customer->lastname), '{email}' => $customer->email, '{order_id}' => $order->id, '{order_reference}' => $order->reference, '{shop_name}' => $this->shop, '{payment}' => $order->payment, '{currency}' => $currency->name, '{carrier}' => $carrier->name, '{total_paid}' => round($order->total_paid), '{invoice}' => $this->sanitizeURL($this->invoiceShortLink($order->reference),'.'), '{adminInvoice}' => $this->sanitizeURL($this->adminInvoiceShortLink($order->reference),'.'), '{order_products}' => $products, '{cart_message}' => $cart_message, ); $vars = $this->getHookVarsValues('ValidateOrder' , $vars, $params); if (Configuration::get($this->prefix . 'NEWORDERA' , null , null , $this->shop_id) != 0 and Configuration::get($this->prefix . 'ADMINPHONE' , null , null , $this->shop_id) != '') { $adminSend = 1; if ($order->total_paid == 0 and Configuration::get($this->prefix . 'NEWORDERFA', null , null , $this->shop_id) == 0) { $adminSend = 0; } $AdminPhone = Configuration::get($this->prefix . 'ADMINPHONE' , null , null , $this->shop_id); if ($adminSend and $text = $this->generateSMStext($vars, 'neworder', 'admin', null , $params, $AdminPhone)) { $smsResult = $this->sendOne($text, $AdminPhone, '-', $order->id, $this->l('New Order')); if($test && $smsResult == 'sent') { $testresult .= 'پیامک به مدیر (' . $AdminPhone . ') ارسال شد.<br>'; }elseif($test && $smsResult == 'queue'){ $testresult .= 'پیامک به مدیر (' . $AdminPhone . ') در صف ارسال قرار گرفت.<br>'; }elseif($test && $smsResult == 'notsendbyrule'){ $testresult .= 'پیامک به مدیر (' . $AdminPhone . ') به خاطر انطباق با قانون پیامکی ارسال نشد.<br>'; }elseif($test){ $testresult .= 'ارسال به مدیر انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.<br>'; } } }elseif($test){ $testresult .= 'هشدار به مدیر هنگام ثبت سفارش جدید غیرفعال است و یا شماره همراه مدیر در صفحه تنظیمات درگاه ثبت نشده است.<br>'; } if (Configuration::get($this->prefix . 'NEWORDERC' , null , null , $this->shop_id) != 0) { $customaerSend = 1; if ($order->total_paid == 0 and Configuration::get($this->prefix . 'NEWORDERFC' , null , null , $this->shop_id) == 0) { $customaerSend = 0; } if($customaerSend){ if($test){ $phone = $customer->phone; }else{ if(Configuration::get($this->prefix . 'USEVERIFIEDMOBILE' , null , null , $this->shop_id)){ $idCustomer = $customer->id; $query = "SELECT mobile FROM "._DB_PREFIX_."ranginesmspresta_mobiles WHERE id_customer='" . $idCustomer."';"; if ($mobile = Db::getInstance()->getRow($query)) { $phone = $mobile['mobile']; } } if($phone == ''){ $orderMobileNumberType = Configuration::get($this->prefix . 'ORDERMOBILE' , null , null , $this->shop_id); if(!$orderMobileNumberType or $orderMobileNumberType == 'orderaddress'){ $address = new Address(intval($order->id_address_invoice)); }else{ $id_address = Address::getFirstCustomerAddressId($customer->id); $address = new Address((int)($id_address)); } if ($address->phone_mobile == null) { return; } $phone = $address->phone_mobile; } } if(Configuration::get('PSCA_EMAIL_GUEST') && Configuration::get('PSCA_EMAIL_GUEST') == $customer->email) $guest_email = Configuration::get('PSCA_EMAIL_GUEST'); else $guest_email = ''; $phone = $this->getHookCustomerPhone('ValidateOrder', $phone, $customer->id); if ($phone and !Tools::strlen($phone) < 10 and $text = $this->generateSMStext($vars, 'neworder', 'customer', $guest_email , $params, $phone)) { $smsResult = $this->sendOne($text, $phone, $customer->id, $order->id, $this->l('New Order')); if($test && $smsResult == 'sent') { $testresult .= 'پیامک به مشتری (' . $phone . ') ارسال شد.<br>'; }elseif($test && $smsResult == 'queue'){ $testresult .= 'پیامک به مشتری (' . $phone . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ $testresult .= 'پیامک به مشتری (' . $phone . ') به خاطر انطباق با قانون پیامکی ارسال نشد.'; }elseif($test){ $testresult .= 'ارسال به مشتری انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } } } }elseif($test){ $testresult .= 'هشدار به مشتری هنگام ثبت سفارش جدید غیرفعال است.<br>'; } if($test) return $testresult; return; } public function hookActionOrderStatusPostUpdate($params, $test = null) { $customer_alert = Tools::getValue('customer_update_order_state_alert'); if ((!$this->enable or $customer_alert != 'on') and $test == null ) { return; } if (Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id) == '' or Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id) == '') { if($test) return 'تنظیمات درگاه به درستی وارد نشده است.'; return; } $cart_message = ''; if($test){ $order = $params['order']; $customer = $params['customer']; $orderstate = new stdclass(); $orderstate->name = $order->orderstate; $phone = $customer->phone; $carrier = $params['carrier']; $gender = new Gender((int)$customer->id_gender, $this->context->language->id); $products = $order->products; } else { $order = new Order((int) ($params['id_order'])); $orderstate = $params['newOrderStatus']; $customer = new Customer((int) $order->id_customer); $carrier = new Carrier((int) $order->id_carrier); $gender = new Gender((int)$customer->id_gender, $this->context->language->id); $phone = ''; $product_list=$order->getProducts(); $products = ''; foreach($product_list as $product){ $products .= $product['product_name'].' * ' .$product['product_quantity']."\n"; } if(Configuration::get($this->prefix . 'USEVERIFIEDMOBILE' , null , null , $this->shop_id)){ $idCustomer = $customer->id; $query = "SELECT mobile FROM "._DB_PREFIX_."ranginesmspresta_mobiles WHERE id_customer='" . $idCustomer."';"; if ($mobile = Db::getInstance()->getRow($query)) { $phone = $mobile['mobile']; } } if($phone == ''){ $orderMobileNumberType = Configuration::get($this->prefix . 'ORDERMOBILE' , null , null , $this->shop_id); if(!$orderMobileNumberType or $orderMobileNumberType == 'orderaddress'){ $address = new Address(intval($order->id_address_invoice)); }else{ $id_address = Address::getFirstCustomerAddressId($customer->id); $address = new Address((int)($id_address)); } if ($address->phone_mobile == null) { return; } $phone = $address->phone_mobile; } $messageArray = Message::getMessagesByOrderId($order->id); if(is_array($messageArray) && isset($messageArray[0]['message'])){ $cart_message = $messageArray[0]['message']; } } $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($customer->firstname), '{lastname}' => $this->sanitizeURL($customer->lastname), '{email}' => $customer->email, '{order_id}' => $order->id, '{order_reference}' => $order->reference, '{shop_name}' => $this->shop, '{order_state}' => $orderstate->name, '{carrier}' => $carrier->name, '{weekday}' => $this->_persianday(date("l",time())), '{total_paid}' => round($order->total_paid), '{invoice}' => $this->sanitizeURL($this->invoiceShortLink($order->reference),'.'), '{order_products}' => $products, '{cart_message}' => $cart_message, ); $vars = $this->getHookVarsValues('OrderStatusPostUpdate', $vars, $params); if(Configuration::get('PSCA_EMAIL_GUEST') && Configuration::get('PSCA_EMAIL_GUEST') == $customer->email) $guest_email = Configuration::get('PSCA_EMAIL_GUEST'); else $guest_email = ''; $phone = $this->getHookCustomerPhone('OrderStatusPostUpdate', $phone, $customer->id); if (!$text = $this->generateSMStext($vars, 'updateorder', 'customer', $guest_email, $params, $phone)) { if($test) return 'اشکالی در ایجاد متن پیامک به وجود آمد.'; return; } $smsResult = $this->sendOne($text, $phone, $customer->id, $order->id, $this->l('Update Order Status')); if($test && $smsResult == 'sent') { return 'پیامک به مشتری (' . $phone . ') ارسال شد.<br>'; }elseif($test && $smsResult == 'queue'){ return 'پیامک به مشتری (' . $phone . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ return 'پیامک به مشتری (' . $phone . ') به خاطر انطباق با قانون پیامکی ارسال نشد.'; }elseif($test){ return 'ارسال به مشتری انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } if ($smsResult == 'sent') { $this->adminDisplayInformation($this->l('The sms has sent.')); } elseif ($smsResult == 'queue') { $this->adminDisplayWarning($this->l('The sms saved in queue and send at cron time')); } elseif ($smsResult == 'notsendbyrule') { $this->adminDisplayWarning($this->l('The sms has not sent by rule')); } else { $this->adminDisplayWarning($this->l('The sms can\'t be sent. Error: ') . $smsResult); } return; } private function _persianday($day){ $days = array( 'Saturday' => 'شنبه', 'Sunday' => 'یکشنبه', 'Monday' => 'دوشنبه', 'Tuesday' => 'سه شنبه', 'Wednesday' => 'چهارشنبه', 'Thursday' => 'پنجشنبه', 'Friday' => 'جمعه' ); return $days[$day]; } public function hookactionAdminOrdersTrackingNumberUpdate($params , $test = null) { $customer_alert = Tools::getValue('customer_update_order_tracking_alert'); if ((!$this->enable or $customer_alert != 'on') and $test == null ) { return true; } $order = $params['order']; $customer = $params['customer']; $carrier = $params['carrier']; $phone = ''; $gender = new Gender((int)$customer->id_gender, $this->context->language->id); $orderObject = new Order((int) ($order->id)); if($test){ $products = $order->products; }else{ $product_list=$orderObject->getProducts(); $products = ''; foreach($product_list as $product){ $products .= $product['product_name'].' * ' .$product['product_quantity']."\n"; } } $messageArray = Message::getMessagesByOrderId($order->id); if(is_array($messageArray) && isset($messageArray[0]['message'])){ $cart_message = $messageArray[0]['message']; } else { $cart_message = ''; } if($test){ $phone = $customer->phone; }else{ if(Configuration::get($this->prefix . 'USEVERIFIEDMOBILE' , null , null , $this->shop_id)){ $idCustomer = $customer->id; $query = "SELECT mobile FROM "._DB_PREFIX_."ranginesmspresta_mobiles WHERE id_customer='" . $idCustomer."';"; if ($mobile = Db::getInstance()->getRow($query)) { $phone = $mobile['mobile']; } } if($phone == ''){ $orderMobileNumberType = Configuration::get($this->prefix . 'ORDERMOBILE' , null , null , $this->shop_id); if(!$orderMobileNumberType or $orderMobileNumberType == 'orderaddress'){ $address = new Address(intval($order->id_address_invoice)); }else{ $id_address = Address::getFirstCustomerAddressId($customer->id); $address = new Address((int)($id_address)); } if ($address->phone_mobile == null) { return true; } $phone = $address->phone_mobile; } } $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($customer->firstname), '{lastname}' => $this->sanitizeURL($customer->lastname), '{email}' => $customer->email, '{order_id}' => $order->id, '{order_reference}' => $order->reference, '{shop_name}' => $this->shop, '{carrier}' => $carrier->name, '{tracking}' => $order->shipping_number, '{total_paid}' => round($order->total_paid), '{invoice}' => $this->sanitizeURL($this->invoiceShortLink($order->reference),'.'), '{order_products}' => $products, '{weekday}' => $this->_persianday(date("l",time())), '{cart_message}' => $cart_message, ); $vars = $this->getHookVarsValues('AdminOrdersTrackingNumberUpdate' , $vars, $params); if(Configuration::get('PSCA_EMAIL_GUEST') && Configuration::get('PSCA_EMAIL_GUEST') == $customer->email) $guest_email = Configuration::get('PSCA_EMAIL_GUEST'); else $guest_email = ''; $phone = $this->getHookCustomerPhone('AdminOrdersTrackingNumberUpdate', $phone, $customer->id); if (!$text = $this->generateSMStext($vars, 'updateOrderTracking', 'customer', $guest_email, $params,$phone)) { if($test) return 'اشکالی در ایجاد متن پیامک به وجود آمد.'; return; } $smsResult = $this->sendOne($text, $phone, $customer->id, $order->id, $this->l('Update Tracking Number')); if($test && $smsResult == 'sent') { return 'پیامک به مشتری (' . $phone . ') ارسال شد.'; }elseif($test && $smsResult == 'queue'){ return 'پیامک به مشتری (' . $phone . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ return 'پیامک به مشتری (' . $phone . ') به خاطر انطباق با یک قانون پیامکی ارسال نشد.'; }elseif($test){ return 'ارسال به مشتری انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } if ($smsResult == 'sent') { $this->adminDisplayInformation($this->l('The sms has sent.')); } elseif ($smsResult == 'queue') { $this->adminDisplayWarning($this->l('The sms saved in queue and send at cron time')); } elseif ($smsResult == 'notsendbyrule') { $this->adminDisplayWarning($this->l('The sms has not sent by rule')); } else { $this->adminDisplayWarning($this->l('The sms can\'t be sent. Error: ') . $smsResult); } return; } public function hookActionObjectAddressAddAfter($params, $test = null) { if (Tools::getValue('controller') == 'AdminAddresses') { if(Tools::getValue('customer_add_address_alert') != 'on') return true; } if (!$this->enable) { if($test) return 'سیستم پیامک فعال نیست.'; return true; } if (Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id) == '' or Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id) == '' or Configuration::get($this->prefix . 'NEWADDMOBILE' , null , null , $this->shop_id) == 0) { if($test) return 'تنظیمات درگاه به درستی وارد نشده است. یا هشدار در هنگام ثبت آدرس جدید فعال نیست.'; return true; } if (is_object($params['object'])) { $newAddress = get_object_vars($params['object']); if(isset($newAddress['id_gender'])){ $gender = new Gender((int)$newAddress['id_gender'], $this->context->language->id); }else{ $customer = new Customer((int) $newAddress['id_customer']); $gender = new Gender((int)$customer->id_gender, $this->context->language->id); } $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($newAddress['firstname']), '{lastname}' => $this->sanitizeURL($newAddress['lastname']), '{shop_name}' => $this->shop, '{email}' => $customer->email, ); $vars = $this->getHookVarsValues('ObjectAddressAddAfter' , $vars, $params); $phone = $newAddress['phone_mobile']; $phone = $this->getHookCustomerPhone('ObjectAddressAddAfter', $phone, $newAddress['id_customer']); if ($phone and !Tools::strlen($phone) < 10) { if ($text = $this->generateSMStext($vars, 'newaddress', 'customer', null, $params, $phone)) { $smsResult = $this->sendOne($text, $phone, $newAddress['id_customer'], '-', $this->l('New Address')); if($test && $smsResult == 'sent') { return 'پیامک به مشتری (' . $phone . ') ارسال شد.'; }elseif($test && $smsResult == 'queue'){ return 'پیامک به مشتری (' . $phone . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ return 'پیامک به مشتری (' . $params['phone'] . ') به خاطر انطباق با یک قانون پیامکی ارسال نشد.'; }elseif($test){ return 'ارسال به مشتری انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } } } } return; } public function hookactionUpdateQuantity($params, $test = null) { if (!$this->enable ) { if($test) return 'سیستم پیامک فعال نیست.'; return true; } if (Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id) == '' or Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id) == '') { if($test) return 'تنظیمات درگاه به درستی وارد نشده است.'; return true; } if($test){ if($params['testtype'] == 'outofstock'){ $isActivate = Configuration::get($this->prefix . 'OUTOFSTOCK' , null , null , $this->shop_id); if ($isActivate != 0){ $vars = array( '{product_name}' => $params['product_name'], '{product_id}' => $params['id_product'], '{shop_name}' => $this->shop, '{product_quantity}' => 0, '{product_name_only}' => $params['product_name_only'], ); $adminPhone = Configuration::get($this->prefix . 'ADMINPHONE' , null , null , $this->shop_id); if (!$text = $this->generateSMStext($vars, 'outofstock', 'admin', null, $params,$adminPhone)) { return 'اشکالی در ایجاد متن پیامک به وجود آمد.'; } $smsResult = $this->sendOne($text, $adminPhone, 'admin', '-', $this->l('Out of Stock')); if($test && $smsResult == 'sent') { return 'پیامک به مدیر (' . $adminPhone . ') ارسال شد.'; }elseif($test && $smsResult == 'queue'){ return 'پیامک به مدیر (' . $adminPhone . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ return 'پیامک به مدیر (' . $params['phone'] . ') به خاطر انطباق با یک قانون پیامکی ارسال نشد.'; }elseif($test){ return 'ارسال به مدیر انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } }else{ return 'ارسال به مدیر در هنگام اتمام موجودی کالا غیرفعال است.'; } }elseif($params['testtype'] == 'backtostock'){ $isActivate = Configuration::get($this->prefix . 'BACKTOSTOCK' , null , null , $this->shop_id); if ($isActivate != 0 and Configuration::get($this->prefix . 'OOSAUTO' , null , null , $this->shop_id)){ $link = new Link(); $product_fullurl = $link->getProductLink($product); $vars = array( '{product_name}' => $params['product_name'], '{product_id}' => $params['id_product'], '{shop_name}' => $this->shop, '{product_url}' => str_replace(array('https://','http://'), array('',''), $this->productShortLink($params['id_product'])), '{product_fullurl}' => str_replace(array('https://','http://'), array('',''), $product_fullurl), '{product_name_only}' => $params['product_name_only'], ); if (!$text = $this->generateSMStext($vars, 'backtostock', 'customer', null, $params,$params['phone'])) { return; } $smsResult = $this->sendOne($text, $params['phone'], 'subscribers' , '-', $this->l('Back to Stock')); if($test && $smsResult == 'sent') { return 'پیامک به مشتری (' . $params['phone'] . ') ارسال شد.<br>'; }elseif($test && $smsResult == 'queue'){ return 'پیامک به مشتری (' . $params['phone'] . ') در صف ارسال قرار گرفت.'; }elseif($test && $smsResult == 'notsendbyrule'){ return 'پیامک به مشتری (' . $params['phone'] . ') به خاطر انطباق با یک قانون پیامکی ارسال نشد.'; }elseif($test){ return 'ارسال به مشتری انجام شد اما از طرف سامانه پیامک نتیجه خطا داده شد.'; } }else{ return 'ارسال خودکار هشدار بازگشت به موجودی به ثبت نام کنندگان غیر فعال است.'; } } } else{ $id_product = (int)$params['id_product']; $id_product_attribute = (int)$params['id_product_attribute']; $context = Context::getContext(); $id_shop = (int)$context->shop->id; $id_lang = (int)$context->language->id; $product = new Product($id_product, false, $id_lang, $id_shop, $context); if (empty($product)) { return; } $product_name = Product::getProductName($id_product, $id_product_attribute, $id_lang); $product_name_only = Product::getProductName($id_product, null, $id_lang); $product_has_attributes = $product->hasAttributes(); $check_oos = ($product_has_attributes && $id_product_attribute) || (!$product_has_attributes && !$id_product_attribute); $product_quantity = (int)$params['quantity']; $adminPhone = Configuration::get($this->prefix . 'ADMINPHONE' , null , null , $this->shop_id); $isActivate = Configuration::get($this->prefix . 'OUTOFSTOCK' , null , null , $this->shop_id); if ($isActivate != 0 && $adminPhone != '' && $check_oos && $product->active == 1 && $product_quantity <= Configuration::get($this->prefix . 'OUTOFSTOCKTHRESHOLD' , null , null , $this->shop_id)) { $vars = array( '{product_name}' => $product_name, '{product_name_only}' => $product_name_only, '{product_id}' => $id_product, '{shop_name}' => $this->shop, '{product_quantity}' => $product_quantity, ); $vars = $this->getHookVarsValues('UpdateQuantity' , $vars, $params); if (!$text = $this->generateSMStext($vars, 'outofstock', 'admin', null, $params, $adminPhone)) { return; } $this->sendOne($text, $adminPhone, 'admin', '-', $this->l('Out of Stock')); } $isActivate = Configuration::get($this->prefix . 'BACKTOSTOCK' , null , null , $this->shop_id); if ($isActivate != 0 && $check_oos && $product_quantity > Configuration::get($this->prefix . 'OUTOFSTOCKTHRESHOLD' , null , null , $this->shop_id) ) { $ignore_attribute = false; $oosIgnoreAttrCateguries = explode(',', Configuration::get($this->prefix . 'OOSIGNOREATTRCAT' , null , null , $this->shop_id)); $product_cats = Product::getProductCategories($id_product); foreach($product_cats as $cat){ if(in_array($cat, $oosIgnoreAttrCateguries)){ $ignore_attribute = true; break; } } if(Configuration::get($this->prefix . 'OOSAUTO' , null , null , $this->shop_id)){ if($ignore_attribute){ $phoneNumbers = $this->getOOSNumbers($id_product , null , $id_shop , $id_lang ); $product_name = $product_name_only; } else { $phoneNumbers = $this->getOOSNumbers($id_product , $id_product_attribute , $id_shop , $id_lang ); } $phones = array_column($phoneNumbers, 'phone_number'); if(!count($phones)) return; $link = new Link(); $product_fullurl = $link->getProductLink($product); $vars = array( '{product_name}' => $product_name, '{product_name_only}' => $product_name_only, '{product_id}' => $id_product, '{shop_name}' => $this->shop, '{product_url}' => str_replace(array('https://','http://'), array('',''), $this->productShortLink($id_product)), '{product_fullurl}' => str_replace(array('https://','http://'), array('',''), $product_fullurl), ); $vars = $this->getHookVarsValues('UpdateQuantity' , $vars, $params); if (!$text = $this->generateSMStext($vars, 'backtostock', 'customer', null, $params)) { return; } $recivers = implode(';',$phones); $reciversCount = count($phones); $this->sendOne($text, $recivers, 'subscribers' , '-', $this->l('Back to Stock')); if ($adminPhone && Configuration::get($this->prefix . 'OOSSUMADMIN' , null , null , $this->shop_id)) { $adminText = $this->l('This massage has sent to Subscribers:') . '('.$reciversCount . ' ' . $this->l('Numbers').')~'.$text; $this->sendOne($adminText, $adminPhone, 'admin', '-', $this->l('Back to Stock Report')); } if($ignore_attribute) $id_product_attribute = null; $this->clearOOS(null, $id_product, $id_product_attribute, $id_shop, $id_lang); }elseif ($adminPhone && Configuration::get($this->prefix . 'OOSSUMADMIN' , null , null , $this->shop_id)) { if($ignore_attribute){ $phoneNumbers = $this->getOOSNumbers($id_product , null , $id_shop , $id_lang ); $product_name = $product_name_only; } else { $phoneNumbers = $this->getOOSNumbers($id_product , $id_product_attribute , $id_shop , $id_lang ); } $phones = array_column($phoneNumbers, 'phone_number'); $reciversCount = count($phones); if(!$reciversCount) return; $adminText = $this->l('Hi Admin') . '~'. $reciversCount . ' ' . $this->l('users has subscribed to this product. Please go to your shop admin panel to send them a massage manualy'); $this->sendOne($adminText, $adminPhone, 'admin', '-', $this->l('Back to Stock Report')); } } return true; } } public function hookDisplayHeader() { $this->page_name = Dispatcher::getInstance()->getController(); if (in_array($this->page_name, array('product'))) { $this->context->controller->addJS($this->_path.'views/js/product-sms-alert.js'); $this->context->controller->addCSS($this->_path.'views/css/product-sms-alert.css', 'all'); }elseif($this->page_name == 'authentication' && version_compare(_PS_VERSION_, '1.7', '>') == true ){ $this->context->controller->registerJavascript('modules-ranginesmspresta', 'modules/'.$this->name.'/views/js/mobileverify.js', ['position' => 'bottom', 'priority' => 200]); Media::addJsDef( array( 'verify_mobile_mandatory' => Configuration::get($this->prefix . 'VEFRIFYMOBILEMANDATORY' , null , null , $this->shop_id), ) ); } Media::addJsDef( array( 'ranginesmspresta_verification_url' => Context::getContext()->link->getModuleLink('ranginesmspresta','actions', ['process' => 'mobileverification']), 'rangineUri' => '//'.Configuration::get('PS_SHOP_DOMAIN_SSL').'/modules/'.$this->name.'/', 'verify_mobile_inputs' => json_decode(Configuration::get($this->prefix .'mobileinputs' , null , null , $this->shop_id),true), ) ); $this->context->controller->addJS($this->_path.'views/js/othermobileverify.js'); } public function hookActionProductOutOfStock($params) { if (!$this->enable or !Configuration::get($this->prefix . 'BACKTOSTOCK' , null , null , $this->shop_id)) { return; } if(Configuration::get($this->prefix . 'RELATETOADVANCEDSTOCK' , null , null , $this->shop_id) == 1){ $isAvailableWhenOutOfStock = Product::isAvailableWhenOutOfStock($params['product']->out_of_stock); if(!$isAvailableWhenOutOfStock) return; } if(Configuration::get($this->prefix . 'notshowbutton' , null , null , $this->shop_id) == 1 && $params['product']->quantity !== 0) return; $id_product = (int)$params['product']->id; $context = Context::getContext(); $id_product_attribute = 0; $this->smarty->assign(array( 'oosButtonText' => Configuration::get($this->prefix . 'OOSBUTTONTEXT' , null , null , $this->shop_id), 'oosButtonPosition' => Configuration::get($this->prefix . 'OOSBUTTONPOSITION' , null , null , $this->shop_id), 'oosButtonWrapper' => Configuration::get($this->prefix . 'OOSBUTTONWRAPPER' , null , null , $this->shop_id), )); return $this->display(__FILE__, 'views/templates/front/oos-alert.tpl'); } public function hookDisplayProductAdditionalInfo($params) { if (!$this->enable or !Configuration::get($this->prefix . 'BACKTOSTOCK' , null , null , $this->shop_id)) { return; } if(Configuration::get($this->prefix . 'RELATETOADVANCEDSTOCK' , null , null , $this->shop_id) == 1){ $isAvailableWhenOutOfStock = Product::isAvailableWhenOutOfStock($params['product']['out_of_stock']); if(!$isAvailableWhenOutOfStock) return; } if ($params['product']['quantity'] > 0 || !Configuration::get('PS_STOCK_MANAGEMENT')) return; $context = Context::getContext(); $id_product = (int)$params['product']['id']; $id_product_attribute = $params['product']['id_product_attribute']; $this->context->smarty->assign( array( 'id_product' => $id_product, 'id_product_attribute' => $id_product_attribute, 'oosButtonText' => Configuration::get($this->prefix . 'OOSBUTTONTEXT' , null , null , $this->shop_id), 'oosButtonPosition' => Configuration::get($this->prefix . 'OOSBUTTONPOSITION' , null , null , $this->shop_id), 'oosButtonWrapper' => Configuration::get($this->prefix . 'OOSBUTTONWRAPPER' , null , null , $this->shop_id), ) ); return $this->display(__FILE__, 'views/templates/front/oos-alert.tpl'); } private function patternSmsHumanity($text){ $splited = explode(';', $text); $pattern_code_array = explode(':', $splited[0]); $pattern_code = $pattern_code_array[1]; unset($splited[0]); $resArray = array(); foreach ($splited as $parm) { $splited_parm = explode(':', $parm, 2); $resArray[$splited_parm[0]] = $splited_parm[1]; } $patternsarray = array(); $patternsmshumanity = $this->patterns; $patternsarray = json_decode($patternsmshumanity, true); if(isset($patternsarray[$pattern_code])){ $patternMessage = $patternsarray[$pattern_code]; preg_match_all('/\%\w*\%/m', $patternMessage, $matches); }else{ $url = $this->server."/api/select"; $param = array ( 'uname'=>Configuration::get($this->prefix . 'USERNAME' , null , null , null), 'pass'=>Configuration::get($this->prefix . 'PASSWORD' , null , null , null), 'patternCode'=>$pattern_code, 'op'=>'getPatternParams' ); $handler = curl_init($url); curl_setopt($handler, CURLOPT_CONNECTTIMEOUT, 5); curl_setopt($handler, CURLOPT_TIMEOUT, 20); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST"); curl_setopt($handler, CURLOPT_POSTFIELDS, json_encode($param)); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); $result = curl_exec($handler); $response = json_decode($result,true); if (is_array($response) && isset($response['status']['code']) && $response['status']['code'] == 0) { $patternMessage = $response['data']['patternMessage']; $patternParams = $response['data']['patternParams']; preg_match_all('/\%\w*\%/m', $patternMessage, $matches); $patternsarray[$pattern_code] = $patternMessage; file_put_contents(__DIR__.'/include/patternsmshumanity.txt',json_encode($patternsarray)); }else{ return $text; } } foreach($resArray as $key => $value){ $patternMessage = str_replace('%'.$key.'%', $value, $patternMessage); } $patternMessage = str_replace("\n", '<br>', $patternMessage); return $patternMessage; } private function generateSMStext($vars, $event, $reciver, $guest_email = null, $params = array(),$phone = '') { if(!isset($params['order']) && isset($params['id_order'])){ $params['order'] = new Order((int) ($params['id_order'])); } $serviceLineStatus = true; $sendServiceNumber = str_replace('+98', '', Configuration::get($this->prefix .'SMSSENUMBER' , null , null , $this->shop_id)); if ($sendServiceNumber == '') { $serviceLineStatus = false; } if ($reciver == 'admin') { switch ($event) { case 'newacount': $type = Configuration::get($this->prefix .'NEWACADTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'NEWACADTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:1rcczz5ujc;firstname:{firstname};lastname:{lastname};company:{shop_name}"; } else { $massage = $this->l('{firstname} {lastname} registred on site.~{shop_name}'); } break; case 'neworder': $type = Configuration::get($this->prefix .'NEWORADTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'NEWORADTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:grptsu0nwo;customer:{firstname} {lastname};"; $massage .= "order-id:{order_id};amount:{total_paid};currency:{currency};"; $massage .= "company:{shop_name}"; } else { $massage = $this->l('New order at {shop_name}~Customer{firstname} {lastname}~Order: {order_id}~Payment: {payment}~Total: {total_paid} {currency}~{shop_name}'); } break; case 'outofstock': $type = Configuration::get($this->prefix .'OUTOFSTOCKTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'OUTOFSTOCKTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:bsiuryovr3;product_id:{product_id};"; $massage .= "product_name:{product_name};company:{shop_name}"; } else { $massage = $this->l('The product by id: {product_id} {product_name} goes out of stock.~{shop_name}'); } break; } } else { switch ($event) { case 'newacount': $type = Configuration::get($this->prefix .'NEWACCUTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'NEWACCUTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:qu3w5o73sy;name:{firstname} {lastname};company:{shop_name}"; } else { $massage = $this->l('Dear {firstname} {lastname},~Welcome to our site.~{shop_name}'); } break; case 'neworder': $type = Configuration::get($this->prefix .'NEWORCUTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'NEWORCUTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:uajucpg0t4;name:{firstname} {lastname};order-code:{order_id};amount:{total_paid} {currency};company:{shop_name}"; } else { $massage = $this->l('Dear {firstname} {lastname},~Your order has created.~Order No: {order_id}~{shop_name}'); } break; case 'updateorder': $type = Configuration::get($this->prefix .'UPORCUTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'UPORCUTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:u9l43mz6w2;name:{firstname} {lastname};order:{order_id};"; $massage .= "status:{order_state};company:{shop_name}"; } else { $massage = $this->l('Dear {firstname} {lastname},~New status for order: {order_id}: {order_state}~{shop_name}'); } break; case 'updateOrderTracking': $type = Configuration::get($this->prefix .'UPORTRTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'UPORTRTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:houz9xrnxw;name:{firstname} {lastname};order:{order_id};"; $massage .= "service:{carrier};company:{shop_name};"; $massage .= "tracking:{tracking}"; } else { $massage = $this->l('Dear {firstname} {lastname},~Your order has sent by {carrier}~Order: {order_id}~Tracking No: {tracking}~{shop_name}'); } break; case 'newaddress': $type = Configuration::get($this->prefix .'NEWADDRTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'NEWADDRTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:qu3w5o73sy;name:{firstname} {lastname};company:{shop_name}"; } else { $massage = $this->l('Dear {firstname} {lastname},~Welcome to our site.'); } break; case 'backtostock': $type = Configuration::get($this->prefix .'BACKTOSTOCKTETYPE' , null , null , $this->shop_id); if ($type == 'custom') { $massage = Configuration::get($this->prefix .'BACKTOSTOCKTEXT' , null , null , $this->shop_id); } elseif ($type == 'sample' and $serviceLineStatus) { $massage = "patterncode:ohkqu3qq89;product:{product_name_only};product_link:{product_url};removeaddr:".str_replace(array('https://','http://'), array('',''),_PS_BASE_URL_)."/rsfavorites;company:company:{shop_name}"; } else { $massage = $this->l('{product_name} goes back to stock!~{product_url}~{shop_name}'); } break; } } preg_match_all("/{{.+}}/",$massage,$m); $post = $_POST; $get=$_GET; if(isset($m[0]) && is_array($m[0])){ foreach($m[0] as $custom_var){ $custom_var = str_replace(array('{{','}}'),array('',''),$custom_var); $customvar_array = explode('/',$custom_var); $new_custom_var = ''; $value = ${$customvar_array[0]}; unset($customvar_array[0]); foreach($customvar_array as $customvar_array_key){ if (is_object($value)) { $value = get_object_vars($value); } $value = $value[$customvar_array_key]; } $vars['{{'.$custom_var.'}}'] = $value; } } if(Configuration::get($this->prefix .'DEBUG' , null , null , $this->shop_id) == 1){ $debugoutput = ''; $debug_post = $this->flatten($post); $debug_get = $this->flatten($get); if(!isset($params['order']) && isset($params['id_order'])){ $params['order'] = new Order((int) ($params['id_order'])); } $debug_params = $this->flatten($params); $debugoutput .= "Post Tokens:\n"; foreach($debug_post as $key=>$value){ $debugoutput .= '{{post/' . $key . '}} = ' . $value . "\n"; } $debugoutput .= "\n\nGet Tokens:\n"; foreach($debug_get as $key=>$value){ $debugoutput .= '{{get/' . $key . '}} = ' . $value . "\n"; } $debugoutput .= "\n\nParams Tokens:\n"; foreach($debug_params as $key=>$value){ $debugoutput .= '{{params/' . $key . '}} = ' . $value . "\n"; } $this->debug($debugoutput,$event,true); } if (strpos($massage, '{sms_rule}') !== false) { $massage = $this->smsRuleshook($massage, $event, $reciver, $params, $phone,$vars); } $massage = str_replace(array_keys($vars), array_values($vars), $massage); return $massage; } public function debug($data,$file = 'rangine_debug',$new = false){ if(Configuration::get($this->prefix .'DEBUG' , null , null , $this->shop_id) == 1){ if(is_array($data) || is_object($data)) $output = json_encode($data); else $output = $data; $file= __DIR__.'/debug/'.$file.'.txt'; $debug_file_contents = @file_get_contents($file); if($new == false) $output = $debug_file_contents."\n".$output; file_put_contents($file,$output); } } private function flatten($array, $prefix = '') { $result = array(); if(is_object($array)){ $array = get_object_vars($array); } foreach($array as $key=>$value) { if(is_array($value) || is_object($value)) { $result = $result + $this->flatten($value, $prefix . $key . '/'); } else { $result[$prefix . $key] = $value; } } return $result; } private function smsRuleshook($template, $event, $reciver, $params, $phone, $vars){ $allRules = unserialize(Configuration::get($this->prefix .'SMS_RULES' , null , null , $this->shop_id)); if(!isset($params['order']) && isset($params['id_order'])){ $params['order'] = new Order((int) ($params['id_order'])); } $smsRuleModified = 0; foreach($allRules as $rule){ if($rule['rulePosition'] == $event){ if($rule['ruleTo'] == 'other' || $rule['ruleTo'] == $reciver || $rule['ruleTo'] == 'supplier'){ switch($rule['ruleBase']){ case 'carrier': if($rule['ruleCondition'] == 'is'){ $carrier = new Carrier((int) $params['cart']->id_carrier); if($rule['ruleConditionValue'] == $carrier->id_reference){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } }elseif($rule['ruleCondition'] == 'isnot'){ if($rule['ruleConditionValue'] != $params['cart']->id_carrier){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } } break; case 'productID': if($rule['ruleCondition'] == 'is'){ $products = array(); if(isset($params['order']->product_list)){ $product_list = $params['order']->product_list; foreach($product_list as $product){ $products[] = $product['id_product']; } }elseif(isset($params['id_order'])){ $order = new Order((int) ($params['id_order'])); $product_list=$order->getProducts(); foreach($product_list as $product){ $products[] = $product['product_id']; } }elseif(isset($params['order'])){ $order = $params['order']; $product_list=$order->getProducts(); foreach($product_list as $product){ $products[] = $product['product_id']; } }elseif(isset($params['id_product'])){ $products[] = $params['id_product']; } if(strpos($rule['ruleConditionValue'],'@') !== false){ $ruleConditionValueArray = explode('@',$rule['ruleConditionValue']); $rule['ruleConditionValue'] = $ruleConditionValueArray[0]; $rule['ruleConditionValue2'] = $ruleConditionValueArray[1]; } if(in_array($rule['ruleConditionValue'],$products)){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } } break; case 'payment': if($rule['ruleCondition'] == 'is'){ if($rule['ruleConditionValue'] == $params['order']->module){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } }elseif($rule['ruleCondition'] == 'isnot'){ if($rule['ruleConditionValue'] != $params['order']->module){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } } case 'orderstatus': if($rule['ruleCondition'] == 'is'){ if($rule['ruleConditionValue'] == $params['newOrderStatus']->name){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } }elseif($rule['ruleCondition'] == 'isnot'){ if($rule['ruleConditionValue'] != $params['newOrderStatus']->name){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } } break; case 'price': if($rule['ruleCondition'] == 'is'){ if($rule['ruleConditionValue'] == $params['order']->total_paid_real){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } }elseif($rule['ruleCondition'] == 'less'){ if($rule['ruleConditionValue'] > $params['order']->total_paid_real){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } }elseif($rule['ruleCondition'] == 'more'){ if($rule['ruleConditionValue'] < $params['order']->total_paid_real){ switch($rule['ruleAction']){ case 'addAfter': $template = str_replace('{sms_rule}',$rule['ruletext'], $template); $smsRuleModified = 1; break; case 'replace': $template = $rule['ruletext']; break; case 'notsend': $template = '<nosendsms>'.$template; break; case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone) , $this->l('Sent in SMS rule')); break; } } } break; case 'supplier': if($reciver != 'admin') break; $products = array(); $order_id = '-'; if(isset($params['order']->product_list)){ $product_list = $params['order']->product_list; $order_id = $params['order']->id; }elseif(isset($params['id_order'])){ $order = new Order((int) ($params['id_order'])); $order_id = $order->id; $product_list=$order->getProducts(); }elseif(isset($params['order'])){ $order = $params['order']; $order_id = $order->id; $product_list=$order->getProducts(); }elseif(isset($params['id_product'])){ $products[] = $params['id_product']; } if(count($product_list)){ foreach($product_list as $product){ $suppliers[$product['id_supplier']] = array( 'id_product'=>$product['id_product'], 'id_shop'=>$product['id_shop'], 'product_name'=>$product['name'], 'product_price'=>$product['price'], 'product_attributes'=>$product['attributes_small'], ); } }else{ break; } if($rule['ruleCondition'] == 'is'){ foreach($suppliers as $key=>$supplier){ if($rule['ruleConditionValue'] == $key){ switch($rule['ruleAction']){ case 'newsms': if($rule['ruleTo'] == 'other' ){ $phone = $rule['ruleToOther']; }elseif($rule['ruleTo'] == 'supplier'){ $result = Db::getInstance()->getRow("
													SELECT *
													FROM `"._DB_PREFIX_."address` AS a
													LEFT JOIN `"._DB_PREFIX_."supplier` as p ON a.id_supplier = p.id_supplier
													WHERE p.id_supplier = '".(int)$id_supplier."';"); if (isset($result['id_supplier'])) { $phone = $result['phone_mobile']; } } $massage = str_replace(array_keys($vars), array_values($vars), $rule['ruletext']); $this->sendSMS(array('message'=> $massage, 'reciver' => $phone, 'order_id'=>$order_id) , $this->l('Rules SMS')); break; } } } } break; } } } } if($smsRuleModified == 0) $template = str_replace('{sms_rule}','', $template); return $template; } private function addPreparedSMSText($text){ $fields = array( 'text' => pSQL($text), ); return Db::getInstance()->insert($this->name.'_sms', $fields); } private function addSMSRule($values){ $newRule = array( 'ruleBase' => $values['ruleBase'], 'ruleCondition' => $values['ruleCondition'], 'ruleConditionValue' => $values['ruleConditionValue'], 'ruleAction' => $values['ruleAction'], 'ruletext' => $values['ruletext'], 'ruleTo' => $values['ruleTo'], 'ruleToOther' => $values['ruleToOther'], 'rulePosition' => $values['rulePosition'], 'ENABLE' => $values['ENABLE'], ); if(isset($values['ruleConditionValue2'])) $newRule['ruleConditionValue'] .= '@'.$values['ruleConditionValue2']; $AllRules = unserialize(Configuration::get($this->prefix .'SMS_RULES' , null , null , $this->shop_id)); $AllRules[] = $newRule; return Configuration::updateValue($this->prefix .'SMS_RULES', serialize($AllRules),false,null,$this->shop_id); } private function editSMSRule($values){ $editRule = array( 'ruleBase' => $values['ruleBase'], 'ruleCondition' => $values['ruleCondition'], 'ruleConditionValue' => $values['ruleConditionValue'], 'ruleAction' => $values['ruleAction'], 'ruletext' => $values['ruletext'], 'ruleTo' => $values['ruleTo'], 'ruleToOther' => $values['ruleToOther'], 'rulePosition' => $values['rulePosition'], 'ENABLE' => $values['ENABLE'], ); if(isset($values['ruleConditionValue2'])) $editRule['ruleConditionValue'] .= '@'.$values['ruleConditionValue2']; $allRules = unserialize(Configuration::get($this->prefix.'SMS_RULES' , null , null , $this->shop_id)); $allRules[$values['editruleid']] = $editRule; return Configuration::updateValue($this->prefix .'SMS_RULES', serialize($allRules),false,null,$this->shop_id); } private function addTimedSms($values){ $fields = array( 'timedbase' => $values['timedbase'], 'datefield' => $values['datefield'], 'relatedate' => $values['relatedate'], 'sendtime' => $values['sendtime'], 'smstext' => $values['timedsmstext'], 'enable' => $values['ENABLE'], ); return Db::getInstance()->insert($this->name.'_timedsms', $fields); } public function getAllSMSRules() { $AllRules = unserialize(Configuration::get($this->prefix .'SMS_RULES' , null , null , $this->shop_id)); return $AllRules; } public function deleteSmsRule($id) { $AllRules = unserialize(Configuration::get($this->prefix .'SMS_RULES' , null , null , $this->shop_id)); unset($AllRules[$id]); return Configuration::updateValue($this->prefix .'SMS_RULES', serialize($AllRules),false,null,$this->shop_id); } public function addVerifyMobileInput($name,$selector){ $newMobileInput = array((string)$name=>$selector); $savedmobileinputs = json_decode(Configuration::get($this->prefix .'mobileinputs' , null , null , $this->shop_id),true); if($savedmobileinputs && is_array($savedmobileinputs)){ $allMobileInputs = array_merge($savedmobileinputs, $newMobileInput); }else{ $allMobileInputs = $newMobileInput; } return Configuration::updateValue($this->prefix .'mobileinputs', json_encode($allMobileInputs,true)); } public function deleteMobileInput($mobileInputKey) { $savedmobileinputs = json_decode(Configuration::get($this->prefix .'mobileinputs' , null , null , $this->shop_id),true); if(is_array($savedmobileinputs) && isset($savedmobileinputs[$mobileInputKey])){ unset($savedmobileinputs[$mobileInputKey]); } return Configuration::updateValue($this->prefix .'mobileinputs', json_encode($savedmobileinputs,true)); } public function getVerifyMobileInput(){ $savedmobileinputs = json_decode(Configuration::get($this->prefix .'mobileinputs' , null , null , $this->shop_id),true); if($savedmobileinputs && is_array($savedmobileinputs)){ $output = '<table class="data-table mobile-inputs">
			<tr><th>نام</th><th>انتخابگر</th><th>'.$this->l('Actions').'</th></tr>'; foreach($savedmobileinputs as $key=>$input){ $output .= '<tr><td dir=ltr>'.$key.'</td><td dir=ltr class="inputselector">'.$input.'</td><td class="actions">
							<a class="delete" data-action="deleteMobileInput" title="'.$this->l('Remove').'" data-mobileinputkey="'.$key.'"><i class="icon-remove"></i></a>	
							<a class="edit" data-action="editMobileInput" title="'.$this->l('Edit').'" data-inputID="'.$key.'"><i class="icon-edit"></i></a>
						</td></tr>'; } $output .= '</table>'; }else{ $output = '<div class="col-lg-9"><p>هنوز فیلدی اضافه نشده است.</p></div>'; } return $output; } public function getAllPreparedSMSText() { try{ $sql = new DbQuery(); $sql->select('*'); $sql->from('ranginesmspresta_sms', 't'); $sql->orderBy('t.weight ASC'); return Db::getInstance()->executeS($sql); } catch(Exception $e) { return array(); } } public function updatePreparedSMSTextSort($id,$weight) { Db::getInstance()->update('ranginesmspresta_sms', array('weight' => pSQL($weight)), 'id = ' . $id); } public function displaySendagainLink($token, $id, $name) { return '<a class="sendagain" data-action="sendagain" title="'.$this->l('Send Again').'" data-logid="'.$id.'"><i class="icon-rocket"></i></a>'; } public function displayPhonelistLink($token, $id, $name) { return '<a class="ajaxAction phonelist" data-action="phonelist" title="'.$this->l('Phone List').'" data-toggle="modal" data-target="#rangineModal"><i class="icon-list-alt"> لیست شماره ها</i></a>'; } public function displayClearLink($token, $id, $name) { return '<a class="clearGroup" data-action="clear" title="'.$this->l('Remove Subscribers').'"><i class="icon-eraser"></i> '.$this->l('Remove Subscribers').'</a>'; } public function displayOossendsmsLink($token, $id, $name) { return '<a class="sendoossms" data-action="oossendsms" title="'.$this->l('Send a SMS').'" data-text="<p>ارسال پیامک به کاربرانی که برای موجود شدن محصول «---» با ترکیب «+++» درخواست ارسال پیامک کرده اند.</p></p><textarea id=SENDONETEXT class=\'textarea-autosize\' style=\'overflow: hidden; overflow-wrap: break-word; resize: none; height: 65px;\'></textarea><p class=\'help-block\'>متن پیامک را تایپ نمایید. توجه داشته باشید که صفحه اول پیامک فارسی 70 کاراکتر و صفحه های دیگر 64 کاراکتر حساب می شود.</p>"><i class="icon-rocket"></i> '.$this->l('Send a SMS').'</a>'; } public function updatePreparedSMSTextMessage($id,$newText) { Db::getInstance()->update('ranginesmspresta_sms', array('text' => pSQL($newText)), 'id = ' . $id); } public function deletePreparedSMSTextMessage($id) { return Db::getInstance()->delete('ranginesmspresta_sms', '`id` = '.$id); } public function preparedSMSoptions() { if($this->licenseCheck()['status'] != 'true') { return 'افزونه لایسنس معتبر ندارد. لطفاً لایسنس معتبر وارد نمایید.'; } $smstexts = $this->getAllPreparedSMSText(); $output = ''; if(count($smstexts)) { $output ='<select id="preparedsms" name="prepared" class="form-control"><option value="0">متن پیامک پیش فرض را انتخاب نمایید</option>'; foreach($smstexts as $smstext){ $output .='<option value="'.$smstext['text'].'" title="'.$smstext['text'].'">'.substr($smstext['text'],0,120).'...</option>'; } $output .='</select>'; }else{ $output .='<div><a href="'.$this->moduleSubpageUrl('preparedsms').'">برای ثبت پیام های پیش فرض به صفحه مربوطه مراجعه نمایید.</a></div>'; } return $output; } public function saveLogs($status, $description, $bulk = null, $phone = null, $customer = null, $order = null, $position = null,$type = null,$duration = null) { $time = time(); $context = Context::getContext(); $id_shop = (int)$context->shop->id; $fields = array( 'customer' => pSQL($customer), 'id_order' => pSQL($order), 'phone' => pSQL($phone), 'position' => pSQL($position), 'status' => pSQL($status), 'bulk' => pSQL($bulk), 'description' => pSQL($description), 'timestamp' => pSQL($time), 'type' => pSQL($type), 'shop' => pSQL($id_shop), 'duration' => pSQL($duration), ); if($this->demo()) $fields['delivery'] = 'demo'; if($type == 'bysample') $fields['delivery'] = 'bysample'; if($status == 'failed') $fields['delivery'] = 'failed'; if($status == 'queue') $fields['delivery'] = 'queue'; if($status == 'notsendbyrule') $fields['delivery'] = 'notsendbyrule'; return Db::getInstance()->insert($this->name, $fields); } public function getLogsCount($page = 0, $onpage = 20, $bulk = null, $phone = null, $customer = null, $order = null, $position = null, $shop_id = null, $status = null, $smsid = null, $description = null, $sentsmsOrderby = null, $sentsmsOrderway = null) { $sql = new DbQuery(); $sql->select('count(*) as cnt'); $sql->from($this->name, 't'); if(!is_null($bulk))$sql->where("t.bulk = '{$bulk}'"); if(!is_null($phone))$sql->where("t.phone = '{$phone}'"); if(!is_null($customer))$sql->where("t.customer = '{$customer}'"); if(!is_null($order))$sql->where("t.order = '{$order}'"); if(!is_null($position))$sql->where("t.position = '{$position}'"); if(!is_null($shop_id))$sql->where("t.shop = '{$shop_id}'"); if(!is_null($status))$sql->where("t.status = '{$status}'"); if(!is_null($description))$sql->where("t.description like '%{$description}%'"); if($onpage !== 'all') { $offset = $page * $onpage; $sql->limit($onpage, $offset); } return Db::getInstance()->executeS($sql); } public function getLogs($page = 0, $onpage = 50, $bulk = null, $phone = null, $customer = null, $order = null, $position = null, $shop_id = null, $status = null, $smsid = null, $description = null,$sentsmsOrderby = null, $sentsmsOrderway = null) { if($onpage == 'cron') $onpage = Configuration::get($this->prefix . 'CRONITEMS' , null , null , $this->shop_id); $sql = new DbQuery(); $sql->select('*'); $sql->from($this->name, 't'); if(!is_null($smsid))$sql->where("t.id_ranginesmspresta = $smsid"); if(!is_null($bulk))$sql->where("t.bulk = '{$bulk}'"); if(!is_null($phone))$sql->where("t.phone like '%{$phone}%'"); if(!is_null($customer))$sql->where("t.customer = '{$customer}'"); if(!is_null($order))$sql->where("t.id_order = '{$order}'"); if(!is_null($position))$sql->where("t.position like '%{$position}%'"); if(!is_null($shop_id))$sql->where("t.shop = '{$shop_id}'"); if(!is_null($status))$sql->where("t.status = '{$status}'"); if(!is_null($description))$sql->where("t.description like '%{$description}%'"); if(!is_null($sentsmsOrderby) && !is_null($sentsmsOrderway)){ if($sentsmsOrderby == 'id') $sentsmsOrderby = 'id_ranginesmspresta'; if($sentsmsOrderby == 'time') $sentsmsOrderby = 'timestamp'; $sql->orderBy($sentsmsOrderby.' '.$sentsmsOrderway); } else{ $sql->orderBy('id_ranginesmspresta DESC'); } if($page > 0) $page--; if($onpage !== 'all') { $offset = $page * $onpage; $sql->limit($onpage, $offset); } return Db::getInstance()->executeS($sql); } public function getMobileLogs($page = 0, $onpage = 25, $bulk = null, $phone = null, $customer = null, $order = null, $position = null, $shop_id = null, $status = null, $smsid = null, $description = null,$sentsmsOrderby = null, $sentsmsOrderway = null) { $offset = $page * $onpage; $sql = new DbQuery(); $sql->select('*'); $sql->from($this->name, 't'); if(!is_null($smsid))$sql->where("t.id_ranginesmspresta = $smsid"); if(!is_null($bulk))$sql->where("t.bulk = '{$bulk}'"); if(!is_null($phone))$sql->where("t.phone IN ({$phone})"); if(!is_null($customer))$sql->where("t.customer = '{$customer}'"); if(!is_null($order))$sql->where("t.id_order = '{$order}'"); if(!is_null($position))$sql->where("t.position like '%{$position}%'"); if(!is_null($shop_id))$sql->where("t.shop = '{$shop_id}'"); if(!is_null($status))$sql->where("t.status = '{$status}'"); if(!is_null($description))$sql->where("t.description like '%{$description}%'"); if(!is_null($sentsmsOrderby) && !is_null($sentsmsOrderway)){ if($sentsmsOrderby == 'id') $sentsmsOrderby = 'id_ranginesmspresta'; if($sentsmsOrderby == 'time') $sentsmsOrderby = 'timestamp'; $sql->orderBy($sentsmsOrderby.' '.$sentsmsOrderway); } else{ $sql->orderBy('id_ranginesmspresta DESC'); } if(!is_null($description)) $sql->where("t.description like '%{$description}%'"); if($onpage !== 'all') $sql->limit($onpage, $offset); return Db::getInstance()->executeS($sql); } public function updateLogs($bulk,$status) { Db::getInstance()->update($this->name, array('delivery' => pSQL($status)), 'bulk = ' . $bulk); } public function deleteLog($id) { return Db::getInstance()->delete('ranginesmspresta', '`id_ranginesmspresta` = '.$id); } public function clearAllQueue() { Db::getInstance()->update($this->name, array('status' => 'canceled'), "status = 'queue'"); Db::getInstance()->update($this->name, array('delivery' => 'canceled'), "delivery = 'queue'"); } public function logsPage($page = 0, $onpage = 20) { include_once('include/sentsms.php'); return $output; } public function getOOS($page = 0, $onpage = 50, $customer_id = null, $phoneNumber = null, $id_product = null, $id_product_attribute = null, $shop_id = null, $id_lang = null,$oosOrderby = null, $oosOrderway = null) { $offset = $page * $onpage; $sql = new DbQuery(); $sql->select('*'); $sql->select('COUNT(phone_number) as phones'); $sql->from('ranginesmspresta_oos', 't'); if(!is_null($customer_id))$sql->where("t.id_customer = '{$customer_id}'"); if(!is_null($phoneNumber))$sql->where("t.phone_number like '%{$phoneNumber}%'"); if(!is_null($id_product))$sql->where("t.id_product = '{$id_product}'"); if(!is_null($id_product_attribute))$sql->where("t.id_product_attribute = '{$id_product_attribute}'"); if(!is_null($shop_id))$sql->where("t.id_shop = '{$shop_id}'"); if(!is_null($id_lang))$sql->where("t.id_lang = '{$id_lang}'"); if(!is_null($oosOrderby) && !is_null($oosOrderway)){ if($oosOrderby == 'id') $oosOrderby = 'id_ranginesmspresta'; if($oosOrderby == 'time') $oosOrderby = 'timestamp'; $sql->orderBy($oosOrderby.' '.$oosOrderway); } else{ $sql->orderBy('phones DESC'); } $sql->groupBy('id_product,id_product_attribute'); if($onpage !== 'all') $sql->limit($onpage, $offset); return Db::getInstance()->executeS($sql); } public function oos_list(){ include('controllers\admin\RangineOOSController.php'); $list = new RangineOOSController(); return $list; $list = new AdminController(); $list->table = 'oos'; $list->list_id = 'oos'; $list->lang = true; $list->addRowAction('delete'); $list->fields_list = (array( 'id_product' => array('title' => $this->l('ID'), 'class' => 'fixed-width-xs', 'align' => 'center'), 'name' => array('title' => $this->l('Name'), 'filter_key' => 'b!name'), )); return $list->renderList(); } private function getOOSNumbers($id_product = null, $id_product_attribute = null, $shop_id = null, $id_lang = null) { $sql = new DbQuery(); $sql->select('t.phone_number'); $sql->from('ranginesmspresta_oos', 't'); if(!is_null($id_product))$sql->where("t.id_product = '{$id_product}'"); if(!is_null($id_product_attribute))$sql->where("t.id_product_attribute = '{$id_product_attribute}'"); if(!is_null($shop_id))$sql->where("t.id_shop = '{$shop_id}'"); if(!is_null($id_lang))$sql->where("t.id_lang = '{$id_lang}'"); $sql->orderBy('t.timestamp DESC'); return Db::getInstance()->executeS($sql); } public function clearOOS($phoneNumber = null, $id_product = null, $id_product_attribute = null, $shop_id = null, $id_lang = null) { $whereArray = array(); if(!is_null($phoneNumber) && $phoneNumber !== '') $whereArray[] = "phone_number = '{$phoneNumber}'"; if(!is_null($id_product)) $whereArray[] = "id_product = '{$id_product}'"; if(!is_null($id_product_attribute)) $whereArray[] = "id_product_attribute = '{$id_product_attribute}'"; if(!is_null($shop_id)) $whereArray[] = "id_shop = '{$shop_id}'"; if(!is_null($id_lang)) $whereArray[] = "id_lang = '{$id_lang}'"; if(count($whereArray)) $where = implode(' AND ',$whereArray); else $where = ''; return Db::getInstance()->delete('ranginesmspresta_oos', $where); } protected function deliveryStatus($logdelivery = null ,$bulk,$type){ switch($logdelivery){ case 'demo': return $this->l('demo'); break; case 'notsync': case 'send': case 'pending': case 'failed': case 'discarded': case 'deliveredTOGSM': case 'delivered': case 'queue': case 'notsendbyrule': case 'canceled': return $this->deliveryStatusTranslate($logdelivery); break; default: if(!is_null($bulk)) { return '<span class="checkdelivery"><span class="bulk">'.$bulk.'</span><i class="process-icon-loading" title="در حال بررسی وضعیت ارسال"></i></span>'; } else { return ''; } break; } } public function deliveryStatusTranslate($status){ if($status == null) return '---'; $responseArray = array( 'notsync' => $this->l('Not Sync'), 'send' => $this->l('sent'), 'pending' => $this->l('pending'), 'failed' => $this->l('failed'), 'discarded' => $this->l('discarded'), 'delivered' => $this->l('delivered'), 'deliveredTOGSM' => $this->l('Delivered TO GSM'), 'queue' => $this->l('In Queue'), 'notsendbyrule' => $this->l('Not Sent by Rule'), 'canceled' => $this->l('canceled'), ); if(isset($responseArray[$status])) return $responseArray[$status]; else return $this->l('Not Defined:') . $status; } protected function getPhoneMobiles($getTotal = false) { $mobilesArray = array(); $mobiles = null; if (!$getTotal) { $sql = new DbQueryCore(); $sql->select('DISTINCT phone_mobile'); $sql->from('address'); $query = $sql->build(); $results=Db::getInstance(_PS_USE_SQL_SLAVE_)->executeS($query); if ($results and count($results)>0) { foreach ($results as $result) { if (!Tools::isEmpty($result['phone_mobile'])) { $mobilesArray[]=$result['phone_mobile']; } } $mobiles = implode(';', $mobilesArray); } else { return false; } return $mobiles; } else { $sql= new DbQueryCore(); $sql->select('count(DISTINCT phone_mobile)'); $sql->from('address'); $sql->where('phone_mobile !=""'); $query= $sql->build(); return Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($sql); } } private function panelExpireTime() { $param = array('op'=>'usertime'); $connectpanel = $this->connectWebservice($param); if($connectpanel['status'] === 'failed'){ $remaindays = 'عدم توان اتصال به سامانه'; }elseif ($time = strtotime($connectpanel['result'])) { $now = new DateTime; $expire = new DateTime('@'.$time); $diff = $now->diff($expire); $remaindays = $diff->days; } else { $remaindays = 'بدون تاریخ انقضا'; } return $remaindays; } public function licenseCheck($referesh = false) { $status = 'true'; $currentLicense = $this->license; $addons = explode(',',$currentLicense['addons']); if($currentLicense['code'] == '') $status = 'null'; if($currentLicense['expiretime'] < time()) $status = 'expire'; $lastMonthTime = time() - 2592000; if(!isset($currentLicense['lastCheckTime']) || $currentLicense['lastCheckTime'] < $lastMonthTime || $referesh){ $status = 'retry'; $license = $currentLicense; if (!Tools::isEmpty($license)) { $time = time(); $url = $this->support.'smsapi/prestashop/'.$this->name.'/index2.php?checkLicense'; $param = array( 'Mversion' => $this->version, 'PSversion' => $this->PSversion, 'shop' => $this->shop, 'domain' => $this->domain, 'license' => $license['code'], ); $handler = curl_init($url); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST"); curl_setopt($handler, CURLOPT_POSTFIELDS, $param); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); curl_setopt($handler, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($handler, CURLOPT_TIMEOUT, 30); $response = curl_exec($handler); $unserializedresponse = @unserialize($response); if($unserializedresponse !== false){ $newLicense = $unserializedresponse; $newLicense['lastCheckTime'] = $time; if (Configuration::updateValue($this->prefix . 'LICENSE', base64_encode(serialize($newLicense)))) { $status = 'true'; $addons = explode(',',$newLicense['addons']); } } } } return array('status'=>$status,'lisense'=>$currentLicense,'addons'=>$addons); } private function panelAuth() { if (Configuration::get($this->prefix . 'USERNAME' , null , null , null) == 'demo' && Configuration::get($this->prefix . 'PASSWORD' , null , null , null) == 'demo') { return array( 'ok' => 'demo', 'credit' => 0, 'expireTime' => 0, 'lines' => 0, ); } if(Configuration::get($this->prefix . 'PANELAUTH' , null , null , $this->shop_id)){ $authCache = unserialize(Configuration::get($this->prefix . 'PANELAUTH' , null , null , $this->shop_id)); if($authCache['updateTime'] > time()-21600) return $authCache; } $param = array('op'=>'credit'); $connectpanel = $this -> connectWebservice($param); if ($connectpanel['status'] === 'failed') { return array('ok' => false,'error' => $connectpanel['result']); } if ($connectpanel['status'] == 0) { $authCache = array( 'ok' => 'user', 'credit' => round($connectpanel['result']), 'expireTime' => $this->panelExpireTime(), 'lines' => $this->panelLines(), 'updateTime' => time(), ); Configuration::updateValue($this->prefix . 'PANELAUTH' , serialize($authCache)); return $authCache; } else { return array( 'ok' => 'failed', 'error' => $connectpanel['result'], ); } } private function panelLines() { $param = array('op'=>'lines'); $connectpanel = $this->connectWebservice($param); if($connectpanel['status'] == 'failed'){ $result = ''; } else{ $linesArray = json_decode($connectpanel['result']); $lines = array(); if(count($linesArray)){ foreach ($linesArray as $line) { $lines[] = str_replace('+98', '', json_decode($line)->number); } } $result = $lines; } return $result; } private function panelCredit() { $param = array('op'=>'credit'); $connectpanel = $this -> connectWebservice($param); return round($connectpanel[1]); } private function panelNews() { $auth = $this->panelAuth(); $url = $this->support.'/smsapi/prestashop/'.$this->name.'/index2.php?getNews'; if($auth['ok'] !== 'user') $url .= '&registry'; $param = array( 'Mversion' => $this->version, 'PSversion' => $this->PSversion, 'shop' => $this->shop, 'domain' => $this->domain, ); $handler = curl_init($url); curl_setopt($handler, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($handler, CURLOPT_TIMEOUT, 30); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST"); curl_setopt($handler, CURLOPT_POSTFIELDS, $param); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); $response = curl_exec($handler); return $response; } private function invoiceShortLink($orderReference = null) { if ($orderReference == null) { return ''; } $shortInvoiceKey = Configuration::get($this->prefix . 'SHORTINVOICEKEY', null , null , $this->shop_id); $factorUrl = _PS_BASE_URL_ .'/'. $shortInvoiceKey.'/'.$orderReference ; return $factorUrl; } private function adminInvoiceShortLink($orderReference = null) { if ($orderReference == null) { return ''; } $shortInvoiceKey = 'rsf'; $factorUrl = _PS_BASE_URL_ .'/'. $shortInvoiceKey.'/'.$orderReference ; return $factorUrl; } public function productShortLink($productID = null) { if ($productID == null) { return ''; } $shortProductKey = Configuration::get($this->prefix . 'SHORTPRODUCTKEY', null , null , $this->shop_id); $productUrl = _PS_BASE_URL_ .'/'. $shortProductKey.'/'.$productID ; return $productUrl; } public function panelGetDelivery($uinqid) { $param = array('op'=>'delivery','uinqid'=>$uinqid); $connectpanel = $this -> connectWebservice($param); return $connectpanel; } private function demo() { $user = Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id); $pass = Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id); if ($user == 'demo' and $pass == 'demo') { return true; } else { return false; } } private function timeago($timestamp) { $strTime = array( $this->l('second'), $this->l('minute'), $this->l('hour'), $this->l('day'), $this->l('month'), $this->l('year') ); $length = array("60","60","24","30","12","10"); $currentTime = time(); if($currentTime >= $timestamp) { $diff = time()- $timestamp; for($i = 0; $diff >= $length[$i] && $i < count($length)-1; $i++) { $diff = $diff / $length[$i]; } $diff = round($diff); return $diff . ' ' . $strTime[$i] . ' ' . $this->l('(s) ago '); } } public function sendOne($text, $phonenumber, $customer = null, $order = null , $position = null) { $server = $this->server; if (!$this->enable) { return 'سیستم پیامک فعال نیست. به صفحه تنظیمات درگاه مراجعه نمایید.'; } $text = trim($text); if(substr($text,0,strlen('<nosendsms>')) == '<nosendsms>'){ $this->saveLogs('notsendbyrule', substr($text,strlen('<nosendsms>')), '-', $phonenumber, $customer, $order, $position, null, 0); return 'notsendbyrule'; } if(Configuration::get($this->prefix . 'CRONJOB' , null , null , $this->shop_id) && $this->cronpass == false){ if($this->cronStates($position) == 1){ $this->saveLogs('queue', $text, '?', $phonenumber, $customer, $order, $position,null,0); return 'queue'; } } $text = str_replace('pcode:','patterncode:',strip_tags(trim($text))); if (Tools::substr($text, 0, 11) === "patterncode") { $text = str_replace("\r\n",';',$text); $text = str_replace("\n",';',$text); $splited = explode(';', $text); $pattern_code = trim(explode(':', $splited[0])[1]); unset($splited[0]); $resArray = array(); foreach ($splited as $parm) { $splited_parm = explode(':', $parm, 2); $resArray[$splited_parm[0]] = trim($splited_parm[1]); } if ($this->demo()) { $param = array( 'uname' => 'demo', 'pass' => 'demo', 'message' => $text, 'to' => $phonenumber, 'op' => 'sendPattern', ); $starttime = time()+microtime(true); $res = $this -> connectWebservice($param); $endtime = time()+microtime(true); $duration = $endtime-$starttime; if ($res['status'] == 'sent') { $status = $res['status']; $description = $text; $bulk = $res['result']; $this->saveLogs($status, $description, $bulk, $phonenumber, $customer, $order, $position,'bysample',$duration); return 'sent'; } else { $status = 'failed'; $description = $text . ' - error: ' . $res['result']; $bulk = '-'; $this->saveLogs($status, $description, $bulk, $phonenumber, $customer, $order, $position,'bysample',$duration); return $res['result']; } } $user = Configuration::get($this->prefix . 'USERNAME' , null , null , $this->shop_id); $pass = Configuration::get($this->prefix . 'PASSWORD' , null , null , $this->shop_id); $fromNum = Configuration::get($this->prefix . 'SMSSENUMBER' , null , null , $this->shop_id); $toNum = explode(';', $phonenumber); $input_data = $resArray; foreach($toNum as $to){ $url = $server."/patterns/pattern?username=".urlencode($user)."&password=".urlencode($pass)."&from=".$fromNum."&to=".json_encode(array($to))."&input_data=".urlencode(json_encode($input_data))."&pattern_code=".$pattern_code; $starttime = time()+microtime(); $handler = curl_init($url); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "GET"); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); curl_setopt($handler, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($handler, CURLOPT_TIMEOUT, 30); $response = curl_exec($handler); $response2 = json_decode($response); $endtime = time()+microtime(); $duration = $endtime-$starttime; if (is_array($response2)) { $res_code = $response2[0]; $res_data = $response2[1]; $status = 'failed'; $result = $this->getPanelErrors($res_code); $this->saveLogs($status, $text, '-', $phonenumber, $customer, $order, $position,'bysample',$duration); } else { $status = $result = 'sent'; $this->saveLogs($status, $text, $response, $phonenumber, $customer, $order, $position,'bysample',$duration); } } return $result; } $rcpt_nm = explode(';', $phonenumber); $param = array(); $param = array ( 'message'=> $text, 'to'=>json_encode($rcpt_nm), 'op'=> 'send' ); if($position == $this->l('Back to Stock') || $position == 'ارسال دستی به خبرنامه کالای ناموجود') { $OOSsender = Configuration::get($this->prefix .'OOSSERNDER' , null , null , $this->shop_id); $param['from'] = $OOSsender; }elseif($position == $this->l('Send SMS Manual')) { $param['from'] = Tools::getValue('SMSNUMBER'); }elseif($position == $this->l('Send Customers')) { $sender = Tools::getValue('SENTOALLSENDERLINE'); $delay = Tools::getValue('SENTOALLDELAYTIME'); $param['from'] = Tools::getValue('SENTOALLSENDERLINE'); $param['time'] = date("Y-m-d H:i:s", time()+($delay*60)); }elseif (count($rcpt_nm) > 5) { $param['time'] = date("Y-m-d H:i:s", time()+300); $phonenumber = 'multiple'; } $starttime = time()+microtime(); $connectpanel = $this->connectWebservice($param); $endtime = time()+microtime(); $duration = $endtime-$starttime; $status = $connectpanel['status']; $description = $text; $bulk = $connectpanel['res_data']; $this->saveLogs($status, $description, $bulk, $phonenumber, $customer, $order, $position,'normal',$duration); return $connectpanel['result']; } private function getPanelErrors($error){ $errorCodes = array( '-1' => 'اتصال به سامانه برقرار نشد. لطفا با پشتیبان سامانه پیامک تماس بگیرید.', '0' => 'عملیات با موفقیت انجام شده است.', '1' => 'متن پیام خالی می باشد.', '2' => 'کاربر محدود گردیده است.', '3' => 'خط به شما تعلق ندارد.', '4' => 'گیرندگان خالی است.', '5' => 'اعتبار کافی نیست.', '7' => 'خط مورد نظر برای ارسال انبوه مناسب نمیباشد.', '9' => 'خط مورد نظر در این ساعت امکان ارسال ندارد.', '98' => 'حداکثر تعداد گیرنده رعایت نشدهه است.', '99' => 'اپراتور خط ارسالی قطع می باشد.', '21' => 'پسوند فایل صوتی نامعتبر است.', '22' => 'سایز فایل صوتی نامعتبر است.', '23' => 'تعداد تالش در پیام صوتی نامعتبر است.', '100' => 'شماره مخاطب دفترچه تلفن نامعتبر می باشد.', '101' => 'شماره مخاطب در دفترچه تلفن وجود دارد.', '102' => 'شماره مخاطب با موفقیت در دفترچه تلفن ذخیره گردید.', '111' => 'حداکثر تعداد گیرنده برای ارسال پیام صوتی رعایت نشده است.', '131' => 'تعداد تالش در پیام صوتی باید یکبار باشد.', '132' => 'آدرس فایل صوتی وارد نگردیده است.', '301' => 'از حرف ویژه در نام کاربری استفاده گردیده است.', '302' => 'قیمت گذاری انجام نگریدهه است.', '303' => 'نام کاربری وارد نگردیده است.', '304' => 'نام کاربری قبال انتخاب گردیده است.', '305' => 'نام کاربری وارد نگردیده است.', '306' => 'کد ملی وارد نگردیده است.', '307' => 'کد ملی به خطا وارد شده است.', '308' => 'شماره شناسنامه نا معتبر است.', '309' => 'شماره شناسنامه وارد نگردیده است.', '310' => 'ایمیل کاربر وارد نگردیده است.', '311' => 'شماره تلفن وارد نگردیده است.', '312' => 'تلفن به درستی وارد نگردیده است.', '313' => 'آدرس شما وارد نگردیده است.', '314' => 'شماره موبایل را وارد نکرده اید.', '315' => 'شماره موبایل به نادرستی وارد گردیده است.', '316' => 'سطح دسترسی به نادرستی وارد گردیده است.', '317' => 'کلمه عبور وارد نگردیده است.', '404' => 'پترن در دسترس نیست.', '455' => 'ارسال در آینده برای کد بالک ارسالی لغو شد.', '456' => 'کد بالک ارسالی نامعتبر است.', '458' => 'کد تیکت نامعتبر است.', '964' => 'شما دسترسی نمایندگی ندارید.', '962' => 'نام کاربری یا کلمه عبور نادرست می باشد.', '963' => 'دسترسی نامعتبر می باشد.', '971' => 'پترن ارسالی نامعتبر است.', '970' => 'پارامتر های ارسالی برای پترن نامعتبر است.', '972' => 'دریافت کننده برای ارسال پترن نامعتبر می باشد.', '992' => 'ارسال پیام از ساعت 8 تا 23 می باشد.', '993' => 'دفترچه تلفن باید یک آرایه باشد', '994' => 'لطفا تصویری از کارت بانکی خود را از منو مدارک ارسال کنید', '995' => 'جهت ارسال با خطوط اشتراکی سامانه، لطفا شماره کارت بانکیه خود را به دلیل تکمیل فرایند احراز هویت از بخش ارسال مدارک ثبت نمایید.', '996' => 'پترن فعال نیست.', '997' => 'شما اجازه ارسال از این پترن را ندارید.ه', '998' => 'کارت ملی یا کارت بانکی شما تایید نشده است.', '1001' => 'فرمت نام کاربری درست نمی باشد)حداقله ۵ کاراکتر، فقط حروف و اعداد(.', '1002' => 'گذر واژه خیلی ساده می باشد)حداقل ۸ کاراکتر بوده و نام کاربری،', 'ایمی' => ' و شماره موبایل در آن وجود نداشته باشد(.', '1003' => 'مشکل در ثبت، با پشتیبانی تماس بگیرید.', '1004' => 'مشکل در ثبت، با پشتیبانی تماس بگیرید.', '1005' => 'مشکل در ثبت، با پشتیبانی تماس بگیرید.', '1006' => 'تاریخ ارسال پیام برای گذشته می باشد، لطفا تاریخ ارسال پیام را به درستی وارد نمایید.ه', '1000100' => 'شما اجازه ارسال بین الملل را از سامانه پیامک رنگینه دریافت نکرده اید. با پشتیبانی سامانه پیامک رنگینه تماس بگیرید.', '1000101' => 'کلید دسترسی خالی است.', '1000102' => 'درگاه بین الملل پاسخی نداد.', '1000103' => 'تعداد مجاز استفاده از دمو سامانه پیامک رنگینه برای سایت شما به پایان رسیده است. شما می توانید با تهیه یک پنل از سامانه پیامک رنگینه به ارسال پیامک از این افزونه ادامه دهید. -> https://rangine.ir', '1000104' => 'شماره دریافت کننده تامعتبر است.', '1000105' => 'امکان ارسال به این کشور را ندارید. با پشتیبانی سامانه پیامک تماس بگیرید', ); return (isset($errorCodes[$error])) ? $errorCodes[$error] : 'اشکال تعریف نشده با کد :' . $error; } private function cronStates($position){ if($position == $this->l('Back to Stock Report')) $position = $this->l('Back to Stock'); $states = array( 'CRON_newacount' => $this->l('New Customer'), 'CRON_neworder' => $this->l('New Order'), 'CRON_updateorder' => $this->l('Update Order Status'), 'CRON_updateOrderTracking' => $this->l('Update Tracking Number'), 'CRON_newaddress' => $this->l('New Address'), 'CRON_outofstock' => $this->l('Out of Stock'), 'CRON_backtostock' => $this->l('Back to Stock'), 'CRON_backtostock_report' => $this->l('Back to Stock Report'), 'CRON_manual' => $this->l('Send SMS Manual'), 'CRON_allcustomers' => $this->l('Send Customers'), 'CRON_smsrule' => $this->l('Rules SMS'), ); if(in_array($position,$states)){ return Configuration::get($this->prefix . array_keys($states,$position)[0] , null , null , $this->shop_id); } return 0; } public function sendSMS($param = array() , $position = null) { $text = $param['message']; $phonenumber = $param['reciver']; if(isset($param['order_id'])) $order_id = $param['order_id']; else $order_id = '-'; if(isset($param['customer_id'])) $customer_id = $param['customer_id']; else $customer_id = '-'; $result = $this -> sendOne($text, $phonenumber, $customer_id, $order_id, $position); if ($result == 'sent' || $result == 'queue' || $result == 'notsendbyrule' ) { return true; } else { return false; } } protected function connectWebservice($param = array()) { $server = $this->server; $url = $server."/services.jspd"; $param['uname'] = Configuration::get($this->prefix . 'USERNAME' , null , null , null); $param['pass'] = Configuration::get($this->prefix . 'PASSWORD' , null , null , null); if(!isset($param['from']) || $param['from'] == '') $param['from']= Configuration::get($this->prefix . 'SMSNUMBER' , null , null , null); if (isset($param['message'])) { $param['message'] = str_replace('~', "\n", $param['message']); } if ($this->demo()) { $url = $this->support.'/smsapi/prestashop/'.$this->name.'/index2.php?demo'; $param['domain'] = $this->domain; $param['Mversion'] = $this->version; $param['PSversion'] = $this->PSversion; $param['shop'] = $this->shop; } elseif (!$param['uname'] or !$param['pass'] or !$param['from']) { return array( 'status' => 'failed', 'result' => $this->l('Gateway configuration is not set proprely.'), 'res_data' => $this->l('Gateway configuration is not set proprely.') ); } $handler = curl_init($url); curl_setopt($handler, CURLOPT_CUSTOMREQUEST, "POST"); curl_setopt($handler, CURLOPT_POSTFIELDS, $param); curl_setopt($handler, CURLOPT_RETURNTRANSFER, true); curl_setopt($handler, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($handler, CURLOPT_TIMEOUT, 30); $response = curl_exec($handler); if (curl_errno($handler)) { $response2 = 'failed'; $res_code = 'failed'; $res_data = $this->getPanelErrors(-1).curl_error($handler); }else{ $response2 = json_decode($response); $res_code = $response2[0]; $res_data = $response2[1]; } switch ($param['op']) { case 'sendPattern': $result = array('status' => $res_code,'result' => $res_data); break; case 'usertime': $result = array('status' => $res_code,'result' => $res_data); break; case 'credit': $result = array('status' => $res_code,'result' => $res_data); break; case 'delivery': if ($response == 'null') { return null; } if ($res_code == 0) { $result = json_decode($res_data); $res2 = explode(':', $result[0]); $res_data = $res2[1]; } $result = $res_data; break; case 'lines': $result = array('status' => $res_code,'result' => $res_data); break; case 'send': if ($res_code == '0') { $status = $result = 'sent'; } else { $status = 'failed'; $result = $this->getPanelErrors($res_code); } $result = array('status' => $status,'result' => $result,'res_data' => $res_data); break; } return $result; } public function hookActionAdminControllerSetMedia($params) { if (strtolower(Tools::getValue('controller')) == 'adminorders') { $this->context->controller->addJS($this->_path.'views/js/adminorders.js'); } if (Tools::getValue('controller') == 'AdminAddresses' && !Tools::getValue('id_address')) { $this->context->controller->addJS($this->_path.'views/js/adminaddress.js'); } if (strtolower(Tools::getValue('controller')) == 'admincustomers' and Tools::getValue('id_customer') && isset($_GET["viewcustomer"])) { $this->context->controller->addJS($this->_path.'views/js/admincustomers.js'); } elseif (strtolower(Tools::getValue('controller')) == 'admincustomers' && isset($this->context->customer->id)) { $this->context->controller->addJS($this->_path.'views/js/admincustomers.js'); } elseif (strtolower(Tools::getValue('controller')) == 'admincustomers') { } if (Tools::getValue('controller') == 'AdminModules' and Tools::getValue('configure') == $this->name) { $this->context->controller->addCSS($this->_path.'views/css/backoffice.css', 'all'); $this->context->controller->addJS($this->_path.'views/js/backoffice.js', 'all'); } $this->context->controller->addCSS($this->_path.'views/css/backofficemobiles.css', 'all'); $this->context->controller->addJS($this->_path.'views/js/backofficemobiles.js', 'all'); } public function hookDisplayAdminOrderLeft($params) { $order = new Order((int)$params['id_order']); $customer = new Customer((int) $order->id_customer); $address = new Address(intval($order->id_address_invoice)); $gender = new Gender((int)$customer->id_gender, $this->context->language->id); $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($customer->firstname), '{lastname}' => $this->sanitizeURL($customer->lastname), '{email}' => $customer->email, '{shop_name}' => $this->shop, '{order_id}' => $order->id, '{order_reference}' => $order->reference, '{payment}' => $order->payment, '{total_paid}' => round($order->total_paid), '{invoice}' => $this->sanitizeURL($this->invoiceShortLink($order->reference),'.'), ); $vars = $this->getHookVarsValues('DisplayAdminOrderLeft' , $vars, $params); $preparedsmstexts = str_replace(array_keys($vars), array_values($vars), $this->preparedSMSoptions()); $orderLastSms = $this->getMobileLogs(0, $onpage = 15, $bulk = null, null, null, $order->id); $orderLastSmsOutput = ''; if (!class_exists('jDateTime')) { include_once('include/jDateTime.php'); } foreach($orderLastSms as $sms){ $orderLastSmsOutput .="<tr>
							<td>".$sms['bulk']."</td>
							<td>".$sms['phone']."</td>
							<td>".jDateTime::date('Y/m/d H:i:s', $sms['timestamp'], null, true,null)."</td>
							<td>".$sms['description']."</td>
							<td>".$this->l($sms['status'])."</td>
							<td>".$this->l($sms['delivery'])."</td>
						</tr>"; } $this->smarty->assign(array( 'order' => $order, 'preparedsmstexts' => $preparedsmstexts, 'phone' => $address->phone_mobile, 'shop_id' => $this->shop_id, 'customer_id' => $order->id_customer, 'order_id' => $order->id, 'orderLastSms' => $orderLastSmsOutput, )); return $this->display(__FILE__, 'views/templates/admin/adminorder.tpl'); } public static function getAllCustomerAddresses($id_customer, $active = true) { if (!$id_customer) { return array(); } $sql = new DbQuery(); $sql->select('*'); $sql->from('address', 'a'); $sql->where("a.id_customer = ".(int) $id_customer); $sql->where("a.deleted = 0"); if($active) $sql->where("a.active = 1"); $adresses = Db::getInstance()->executeS($sql); return $adresses; } public function hookDisplayAdminCustomers($params) { $mobilephones =array(); $allCustomerMobiles =array(); $mobilesoptions = ''; if(isset($params['smarty']->tpl_vars['addresses']->value)){ $customer_addresses = $params['smarty']->tpl_vars['addresses']->value; }else{ $customer_addresses = $this->getAllCustomerAddresses($params['id_customer'], true); } $phone = $this->getHookCustomerPhone('DisplayAdminCustomers', '', $params['id_customer']); if($phone) { $mobilephones[$phone] = $phone; $allCustomerMobiles[] = $phone; } foreach($customer_addresses as $address){ if(!isset($mobilephones[$address['phone_mobile']])){ $mobilesoptions .= '<option value="'.$address['phone_mobile'].'">'.$address['phone_mobile'].'</option>'; } $mobilephones[$address['phone_mobile']] = $address['phone_mobile']; $allCustomerMobiles[] = $address['phone_mobile']; } $customer = new Customer((int)$params['id_customer']); $gender = new Gender((int)$customer->id_gender, $this->context->language->id); $vars = array( '{gender}' => ($gender->name == 'آقا') ? 'آقای' : $gender->name, '{firstname}' => $this->sanitizeURL($customer->firstname), '{lastname}' => $this->sanitizeURL($customer->lastname), '{email}' => $customer->email, '{shop_name}' => $this->shop, ); $vars = $this->getHookVarsValues('DisplayAdminCustomers' , $vars, $params); $preparedsmstexts = str_replace(array_keys($vars), array_values($vars), $this->preparedSMSoptions()); if(count($allCustomerMobiles)) $userLastSms = $this->getMobileLogs(0, $onpage = 15, $bulk = null, implode(',',$allCustomerMobiles)); else $userLastSms = array(); $userLastSmsOutput = ''; if (!class_exists('jDateTime')) { include_once('include/jDateTime.php'); } foreach($userLastSms as $sms){ $userLastSmsOutput .="<tr>
							<td>".$sms['bulk']."</td>
							<td>".$sms['phone']."</td>
							<td>".jDateTime::date('Y/m/d H:i:s', $sms['timestamp'], null, true,null)."</td>
							<td>".$sms['description']."</td>
							<td>".$this->l($sms['status'])."</td>
							<td>".$this->l($sms['delivery'])."</td>
						</tr>"; } $trausted_rangine_phone = $trausted_rangine_phone_status = null; $query = "SELECT * FROM "._DB_PREFIX_."ranginesmspresta_mobiles WHERE id_customer='" . $customer->id."';"; if ($mobile = Db::getInstance()->getRow($query)) { $trausted_rangine_phone = $mobile['mobile']; $trausted_rangine_phone_status = $mobile['active']; } $this->smarty->assign(array( 'preparedsmstexts' => $preparedsmstexts, 'phone' => $mobilephones, 'trausted_rangine_phone' => $trausted_rangine_phone, 'trausted_rangine_phone_status' => $trausted_rangine_phone_status, 'phoneoptions' => $mobilesoptions, 'shop_id' => $this->shop_id, 'customer_id' => $params['id_customer'], 'userLastSms' => $userLastSmsOutput, )); return $this->display(__FILE__, 'views/templates/admin/admincustomer.tpl'); } public function hookModuleRoutes() { $shortLinkKey = Configuration::get($this->prefix .'SHORTINVOICEKEY' , null , null , $this->shop_id); $shortProductKey = Configuration::get($this->prefix .'SHORTPRODUCTKEY' , null , null , $this->shop_id); return array( 'module-smsranginepresta-shortlink' => array( 'controller' => 'shortlink', 'rule' => $shortLinkKey.'/{order_reference}', 'keywords' => array( 'order_reference' => array('regexp' => '[\w]+', 'param' => 'order_reference'), ), 'params' => array( 'fc' => 'module', 'module' => $this->name, ) ), 'module-smsranginepresta-adminshortlink' => array( 'controller' => 'adminshortlink', 'rule' => 'rsf/{order_reference}', 'keywords' => array( 'order_reference' => array('regexp' => '[\w]+', 'param' => 'order_reference'), ), 'params' => array( 'fc' => 'module', 'module' => $this->name, ) ), 'module-smsranginepresta-productshortlink' => array( 'controller' => 'productshortlink', 'rule' => $shortProductKey.'/{product_id}', 'keywords' => array( 'product_id' => array('regexp' => '[\w]+', 'param' => 'product_id'), ), 'params' => array( 'fc' => 'module', 'module' => $this->name, ) ), 'module-smsranginepresta-rsfavorites' => array( 'controller' => 'rsfavorites', 'rule' => 'rsfavorites', 'keywords' => array(), 'params' => array( 'fc' => 'module', 'module' => $this->name, ) ), ); } public function sanitizeURL($string = null, $except = null) { $find = array('http','https',':','//','.','www'); if ($except && ($key = array_search($except, $find)) !== false) { unset($find[$key]); } $output = str_ireplace($find,array(''),array($string)); return $output[0]; } } class RangineSmsPrestaApi { public $api_version; public $help; public $message; public $reciver; public $position; public $pattern; public $tokens; public function __construct() { $this->version = '2.3.0'; $this->help = '<p>برای استفاده از api افزونه پیامک پرستاشاپ رنگینه کافی است دستور زیر را در محل مناسب از کدهای قالب یا ماژول خود قرار دهید.<br>در زیر 2 نمونه از ارسال پیامک معمولی و 2 نمونه از ارسال پیامک بر اساس الگو نمایش داده شده است. لازم به ذکر است که پیامک ارسال شده بر اساس الگو با سرعت بالا ارسال می شود. لیست الگو ها را می توانید در سامانه پیامک رنگینه مشاهده نمایید. الگوهای مورد نیاز را نیز می توانید با ارسال تیکت در سامانه پیامک درخواست نمایید.</p>
		
		<pre dir="ltr">
if(class_exists("RangineSmsPrestaApi")) { // بررسی اینکه آیا افزونه پیامک رنگینه وجود دارد
	//برای ارسال پیامک معمولی دو روش وجود دارد:
	// 1- با استفاده از متغیرهای شیء گرا
	$smsObject = new RangineSmsPrestaApi;
	$smsObject->message = "متن پیامک";
	$smsObject->reciver = "شماره همراه";
	$smsObject->position = "موقعیت ارسال پیامک";
	$result = $smsObject->send();					//Response: true/false
	
	//2- با استفاده از متغیرهای معمولی
	$smsObject = new RangineSmsPrestaApi;
	$message = "متن پیامک";
	$reciver = "شماره همراه";
	$position = "موقعیت ارسال پیامک";
	$result = $smsObject->send($message,$reciver,$position);		//Response: true/false
	
	//برای ارسال پیامک ّبر اساس الگو دو روش وجود دارد:
	// 1- با استفاده از متغیرهای شیء گرا
	$smsObject = new RangineSmsPrestaApi;
	$smsObject->pattern = "شماره الگو"; 			// string or number
	$smsObject->reciver = "شماره همراه"; 			// string or number
	$smsObject->position = "موقعیت ارسال پیامک"; 	// string
	$smsObject->tokens = array(						//مثال ها برای الگوی 142
		"firstname"=> "نام مشتری",
		"lastname"=> "نام خانوادگی مشتری",
		"site"=> "نام فروشگاه",
	);
	$result = $smsObject->sendPattern();			//response: true/false
	
	//2- با استفاده از متغیرهای معمولی
	$smsObject = new RangineSmsPrestaApi;
	$pattern = "شماره الگو"; 			// string or number
	$reciver = "شماره همراه"; 			// string or number
	$position = "موقعیت ارسال پیامک"; 	// string
	$tokens = array(					//مثال ها برای الگوی 142
		"firstname"=> "نام مشتری",
		"lastname"=> "نام خانوادگی مشتری",
		"site"=> "نام فروشگاه",
	);
	$result = $smsObject->sendPattern($pattern,$reciver,$position,$tokens);			//response: true/false
}else{
	error_log("افزونه پیامک رنگینه یافت نشد");
}
		</pre>
		
		<p>$result در دستور فوق در صورت ارسال شدن پیامک مقدار true و در صورت عدم موفقیت در ارسال پیامک مقدار false را برمیگرداند.</p>'; } public function send($message = null, $reciver = null, $position = null) { if($message) $this->message = $message; if($reciver) $this->reciver = $reciver; if($position) $this->position = $position; $ranginesmspresta = new RangineSmsPresta; $result = $ranginesmspresta->sendSMS( array( 'message' => $this->message, 'reciver' => $this->reciver ) ,$this->position ); return $result; } public function sendPattern($pattern = null, $reciver = null, $position = null, $tokens = null) { if($pattern) $this->pattern = $pattern; if($reciver) $this->reciver = $reciver; if($position) $this->position = $position; if($tokens) $this->tokens = $tokens; $messageArray = array(); $messageArray[] = 'patterncode:'.$this->pattern; if(is_array($this->tokens)){ foreach($this->tokens as $key=>$value){ $messageArray[] = $key.':'.$value; } }else{ return false; } $this->message = implode(';',$messageArray); $ranginesmspresta = new RangineSmsPresta; $result = $ranginesmspresta->sendSMS( array( 'message' => $this->message, 'reciver' => $this->reciver ) ,$this->position ); return $result; } private function translater(){ array( $this->l('* You should add a mobile number for admin at Gateway Settings page to recieve admin alerts.'), $this->l('Actions'), $this->l('Admin phone:'), $this->l('Alert on create new account to admin:'), $this->l('Alert on create new account to customer:'), $this->l('Alert on create new address to customer:'), $this->l('Alert on update order status to customer:'), $this->l('Alerts Settings'), $this->l('Alerts on new free order to admin:'), $this->l('Alerts on new free order to customer:'), $this->l('Alerts on new order to Admin:'), $this->l('Alerts on new order to Customer:'), $this->l('Alerts when pruducts goes out of stock:'), $this->l('BULK'), $this->l('By Sample'), $this->l('CUSTOMER'), $this->l('ORDER'), $this->l('Clear Logs on Uninstall:'), $this->l('Close'), $this->l('Subscribers'), $this->l('Custom Text:'), $this->l('Custom'), $this->l('DELIVERY'), $this->l('DESCRIPTION'), $this->l('Dear {firstname} {lastname},~Welcome to our site.'), $this->l('Dear {firstname} {lastname},~Your order has created.~Order No: {order_id}~{shop_name}'), $this->l('Dear {firstname} {lastname},~Your order has sent by {carrier}~Order: {order_id}~Tracking No: {tracking}~{shop_name}'), $this->l('Enable if you want to clear all SMS logs when you uninstall this module.'), $this->l('Enable if you want you site to send SMS.'), $this->l('Gateway Settings'), $this->l('Gateway alert'), $this->l('Gives the customer the option of receiving a sms notification when an out-of-stock product is available again.'), $this->l('ID'), $this->l('No one has subscribed to any product.'), $this->l('No'), $this->l('On new order sms'), $this->l('On set order tracking number sms'), $this->l('On update order status sms'), $this->l('Out of Stock Subscribers Report'), $this->l('PHONE'), $this->l('POSITION'), $this->l('Password:'), $this->l('Phone List'), $this->l('Product Attribute'), $this->l('Product availability:'), $this->l('Product'), $this->l('Quantity for which a product is considered out of stock.'), $this->l('Rangine SMS login Password.'), $this->l('Remove Subscribers'), $this->l('SHOP'), $this->l('STATUS'), $this->l('Save'), $this->l('Select which type you want to send to admin on new account event.'), $this->l('Select which type you want to send to admin on new order event.'), $this->l('Select which type you want to send to customer on new account event.'), $this->l('Select which type you want to send to customer on new order event.'), $this->l('Select which type you want to send to customer on update order event.'), $this->l('Send Customers'), $this->l('Send Invoice:'), $this->l('Send SMS Manual'), $this->l('Send SMS'), $this->l('Send a SMS'), $this->l('Send back to stock SMS alerts immediately after a product goes back to stock. The admin recieved a sms in both cases.'), $this->l('Send sms to customers'), $this->l('Send to Admin'), $this->l('Send to All Customers'), $this->l('Send to Customer'), $this->l('Send to customer. If set to False you should go to Out Of Stock tab and send Sms manual.'), $this->l('Sent Back to Stock Automaticly:'), $this->l('Sent SMS Report'), $this->l('Sent to:'), $this->l('Service Sms number:'), $this->l('Settings is not updated!'), $this->l('Settings updated.'), $this->l('Shop'), $this->l('Sms number:'), $this->l('TIME'), $this->l('Text for Admin on New Account:'), $this->l('Text for Admin on New Order:'), $this->l('Text for Admin on out of stock:'), $this->l('Text for Customer on New Account:'), $this->l('Text for Customer on New Address:'), $this->l('Text for Customer on New Order:'), $this->l('Text for Customer on Update Order Tracking:'), $this->l('Text for Customer on Update Order:'), $this->l('Text message:'), $this->l('The sms sent.'), $this->l('The sms sent to customers.'), $this->l('Threshold:'), $this->l('To send multiple sms, saperate numbers with ; ex:09123456789;09101234567.'), $this->l('Type SMS text.'), $this->l('Type your custom text. you can use this variables: {gender} {firstname} {lastname}{shop_name}'), $this->l('Update Settings'), $this->l('Username:'), $this->l('Variables: {product_id} {product_name} {shop_name} {product_quantity} {product_reference}'), $this->l('Variables: {shop_name} {gender} {firstname} {lastname} {order_id} {order_reference} {carrier} {tracking}'), $this->l('Variables: {shop_name} {gender} {firstname} {lastname} {order_id} {order_reference} {order_state} {carrier}'), $this->l('Welcome to Rangine SMS module for Prestashop. You can have the best exprience of using SMS module to develope your business.'), $this->l('Welcome'), $this->l('Yes'), $this->l('default'), $this->l('ex: +985000XXXXXXX'), $this->l('ex: +985000XXXXXXX.'), $this->l('ex: 09123456789'), $this->l('ex: username.'), $this->l('insert valid phone number'), $this->l('sent'), $this->l('Text is empty'), $this->l('unique phone mobile(s), from customers is exist'), $this->l('{firstname} {lastname} registred on site'), $this->l('{product_name} goes back to stock!~{product_url}~{shop_name}'), $this->l('{product_id} goes out to stock on {shop_name}.~Quantity: {product_quantity}'), $this->l('{shop_name}~Dear {firstname} {lastname},~New status for order: {order_id}: {order_state}'), $this->l('Enable SMS system:'), $this->l('Alert on set order tracking number to customer:'), $this->l('Order Mobile Number:'), $this->l('Customer First Address Mobile'), $this->l('Order Address Mobile'), $this->l('Which mobile number should be used for order alerts. If you have guest customer, choose order number'), $this->l('The lisence saved successfully'), $this->l('Error in saving license. Please Try again.'), $this->l('Subscribed Phone List'), $this->l('Number'), $this->l('Customer Numbers'), $this->l('Text for subscribers on back to stock:'), $this->l('{product_name} goes back to stock!~{product_url}~{shop_name}.'), $this->l('New order at {shop_name}~Customer: {firstname} {lastname}~Order: {order_id}~Payment: {payment}~Total: {total_paid} {currency}'), $this->l('You should set your license to achive this page!'), $this->l('Delay Time:'), $this->l('Sender is empty'), $this->l('License is empty'), $this->l('Which number should be used to send this sms. ex: +985000XXXXXXX'), $this->l('When enabled, the checkbox in order status update pane of order edit page checked as default.'), $this->l('When enabled, the checkbox in order tracking number update pane of order edit page checked as default.'), $this->l('Use cron to send SMS:'), $this->l('Enable if you want to cron to send SMS by cron job system.'), $this->l('If the process of sending SMS is slow, you can use cron to send it after a while.'), $this->l('Type your SMS Panel user name'), $this->l('Type your SMS Panel pasword'), $this->l('This phone will get all administrator SMS'), $this->l('Normal SMS will send from this number'), $this->l('By sample SMS will send from this number'), $this->l('After 5 Minutes'), $this->l('After 15 Minutes'), $this->l('After 30 Minutes'), $this->l('After 1 hour'), $this->l('After 2 hour'), $this->l('After 5 hour'), $this->l('After 24 hour'), $this->l('ACTIONS'), $this->l('Send Again'), $this->l('Out of Stock Settings'), $this->l('Out of Stock Sender:'), $this->l('ex: 5000125475.'), $this->l('Remote SMS Settings'), $this->l('Enable Remote SMS:'), $this->l('Enable if you want to manage your site remotely by SMS.'), $this->l('Remote Secret Key:'), $this->l('Type a word to create token.'), $this->l('Access Url For SMS Panel:'), $this->l('Enable Shop Key:'), $this->l('Type a word; When your site get this word from your remote sms, makes site enabled.'), $this->l('Disable Shop Key:'), $this->l('Type a word; When your site get this word from your remote sms, makes site disabled.'), $this->l('SMS System Testing'), $this->l('Type SMS text. You can use this variables: {gender} {firstname} {lastname} {shop_name} {order_id} {order_reference} {payment} {total_paid} '), $this->l('Prepared Texts'), $this->l('Select One of theme if you want.'), $this->l('Text'), $this->l('The module updated successfully.'), $this->l('There was an error while extracting the module (file may be corrupted.'), $this->l('There was an error while save module on disk.'), $this->l('Shop Name:'), $this->l('Type shop name if you want.'), $this->l('Shop name in SMS texts.'), $this->l('Verify Mobile Settings'), $this->l('Enable Verify Mobile:'), $this->l('Enable if you want to verify registration custom mobile field.'), $this->l('Make Mobile Verification Mandatory:'), $this->l('Enable if you want to reject registration without mobile verification.'), $this->l('OTP Code Length:'), $this->l('How many character do you like to apply to OTP Code.'), $this->l('Character'), $this->l('Delay for resend OTP:'), $this->l('Time in second that user wait for resend OTP.'), $this->l('Seconds'), $this->l('Add Verify Mobile Field'), $this->l('Mobile Inputs:'), $this->l('Mobile Input Name:'), $this->l('Type a name for this row.'), $this->l('Mobile Input Selector:'), $this->l('Insert jQuery selector for mobile input.'), $this->l('Send sent sms summary:'), $this->l('Send to admin. If set to true the administrator recive a sms that contains how many messages have sent by back to stock action Or how many users are waiting back to stock sms depend on what choose in previews option'), $this->l('If you choose that back-to-stock messages send automaticly you will recive a summary sms after sending message to all recivers. Otherwise you will recive a message contains how many people are want that product.'), $this->l('User Invoice Url Pattern:'), $this->l('User invoice url pattern. Default url is : "/index.php?controller=pdf-invoice&id_order={order_id}" '), $this->l('Guest Invoice Url Pattern:'), $this->l('Guest invoice url pattern. Default url is : "/guest-tracking?id_order={order_id}&email={guest_email}"'), $this->l('Invoice Short Url Pattern:'), $this->l('Choose Invoice short url first argument; for example, if you type "rsl" your short invoice link will be http://yoursiteurl/rsl/ASDFVR . Attention: If you change this all generaterd short links will redirect to 404 page.'), $this->l('Duration'), $this->l('Active fields in report'), $this->l('Rule Base:'), $this->l('Rule Base'), $this->l('Condition:'), $this->l('Condition'), $this->l('Action:'), $this->l('Action'), $this->l('To:'), $this->l('To'), $this->l('Position:'), $this->l('Position'), $this->l('Update Order'), $this->l('Update Order Tracking'), $this->l('Admin'), $this->l('Customer'), $this->l('Other'), $this->l('There is not any sms rule.'), $this->l('Reciver'), $this->l('carrier'), $this->l('is'), $this->l('isnot'), $this->l('less'), $this->l('more'), $this->l('addAfter'), $this->l('replace'), $this->l('notsend'), $this->l('newsms'), $this->l('admin'), $this->l('customer'), $this->l('other'), $this->l('neworder'), $this->l('newacount'), $this->l('updateorder'), $this->l('updateOrderTracking'), $this->l('newaddress'), $this->l('backtostock'), $this->l('outofstock'), $this->l('Condition Value'), $this->l('Condition'), $this->l('The rule has saved'), $this->l('Other Number'), $this->l('Notify me button Text:'), $this->l('Type the text that you want to show on Notify me button'), $this->l('Put Notify me button after this element:'), $this->l('If the Notify Me button is in misplaced position you can type here the jquery selector of element that you want to put the button aftr it. like: .product-minimal-quantity'), $this->l('Notify me button wrapper selector:'), $this->l('If you type any jquery selector in previews field, type the notify button wrapper element selector here. like : #oosHook or .product-out-of-stock'), $this->l('Guest invoice url pattern. Default url is : "/guest-tracking?order_reference={order_reference}&email={guest_email}"'), $this->l('Variables:'), $this->l('notsendbyrule'), $this->l('payment'), $this->l('price'), $this->l('Active fields in report:'), $this->l('The rule has saved.'), $this->l('productID'), $this->l('Product Short Url Pattern:'), $this->l('Choose Product short url first argument; for example, if you type "rsp" your short invoice link will be http://yoursiteurl/rsp/12 . Attention: If you change this all generaterd short links will redirect to 404 page.'), $this->l('Use cron in this states:'), $this->l('Which of these states run in Cron.'), $this->l('New Account SMS'), $this->l('New Order SMS'), $this->l('Update Order SMS'), $this->l('Update Order Tracking SMS'), $this->l('New Address SMS'), $this->l('Out of Stock SMS'), $this->l('Back to stock'), $this->l('Manual SMS'), $this->l('All Customers SMS'), $this->l('Rules SMS'), $this->l('Items to send on cron:'), $this->l('How many SMS should be sent on cron.'), $this->l('Send OTP'), $this->l('Manual SMS to OOS'), $this->l('orderstatus'), $this->l('supplier'), $this->l('Use verified mobile number for sending sms:'), $this->l('Enable if you want to use verified mobile unmber as customer number to recieve sms. This option will alter related option in Alerts Setting page.'), 'text' => $this->l('Send selected SMS again'), $this->l('Send selected messages?'), $this->l('Delete selected SMS log'), $this->l('Are you sure you want to delete log(s),?'), $this->l('canceled'), $this->l('queue'), $this->l('Clear All Queued SMS'), $this->l('Quantity'), $this->l('Debug:'), $this->l('Enable if you want to debug parts of the module.'), $this->l('When you enable debug mode, the module will write some log in debug folder.'), $this->l('Custom Text or Pattern'), $this->l('Custom Text or Variables of Pattern'), $this->l('Pattern Vizard'), $this->l('Our Suggestions'), $this->l('Your verification code: {code}~{shop_name}'), $this->l('Custom Text or Variables of Pattern:'), $this->l('Gateway Name:'), $this->l('Rangine'), $this->l('Select One Gateway.'), $this->l('Admin Invoice Url Pattern:'), $this->l('Admin invoice url pattern. You can use these variabels: '), $this->l('Number per once:'), $this->l('Which number should be sent at once. If you want to send all at once leave it empty'), $this->l('Delay Between two sending sms'), 'desc' => $this->l('Which number should be sent at once. If you want to send all at once leave it empty'), $this->l('Send your SMS in minutes?'), $this->l('Between Time:'), $this->l('Low Credit Alert:'), $this->l('Show an alert on admin dashboard when your SMS credit is low.'), $this->l('Panel Address:'), $this->l('https://sms.rangine.ir'), $this->l('Change it by support agent advice!'), $this->l('Rangine Top Menu:'), $this->l('Show Rangine Top menu.'), $this->l('Pattern Wizard'), ); } } 